<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../toolchain/docbook-xml/docbookx.dtd">
<section id="activerecord_integration">
		<title>ActiveRecord</title>
		<para>
			If you are using ActiveRecord you may consider using the
			integration we developed fo it. In order to do so, first of
			all, add a reference to the following assembly:
		</para>
		<para>
			<itemizedlist>
				<listitem>
					<para>Castle.MonoRail.ActiveRecordSupport</para>
				</listitem>
			</itemizedlist>
		</para>
		<section>
			<title>The Main Players</title>

			<para></para>
			<section>
				<title>ARSmartDispatcherController</title>
				<para>
					What we are about to discuss only works if you are
					using
					<literal>ARSmartDispatcherController</literal>
					instead of
					<literal>SmartDispatcherController</literal>
					. The
					<literal>ARSmartDispatcherController</literal>
					offers a
					<literal>CustomBindObject</literal>
					method that is ActiveRecord-aware.
				</para>
			</section>
			<section>
				<title>ARDataBindAttribute and ARDataBinder</title>
				<para>
					So imagine that you are creating a CRUD page for a
					<literal>Customer</literal>
					object. Creation is really simple, and the
					<literal>DataBindAttribute</literal>
					attribute is enough:
				</para>
				<programlisting lang="cs"><![CDATA[
public class CustomerController : ARSmartDispatcherController 
{
    public void Index()
    {
    }

    public void New()
    { 
    }

    public void Create([DataBind("customer")] Customer customer)
    { 
        try
        {
            customer.Create();

            RedirectToAction("index");
        }
        catch(Exception ex)
        {
            Flash["error"] = ex.Message;

            RedirectToAction("new", Request.Form);
        }
    }
}
]]></programlisting>
				<para>
					Now editing is trick. You must load the
					<literal>Customer</literal>
					, and populate the changes with the form data.
					Enters
					<literal>ARDataBindAttribute</literal>
					:
				</para>
				<programlisting lang="cs"><![CDATA[
public class CustomerController : ARSmartDispatcherController 
{
    ...

    public void Edit(int id)
    { 
        PropertyBag.Add("customer", Customer.Find(id));
    }

    public void Update([ARDataBind("customer", AutoLoad=AutoLoadBehavior.Always)] Customer customer)
    { 
        try
        {
            customer.Update();

            RedirectToAction("index");
        }
        catch(Exception ex)
        {
            Flash["error"] = ex.Message;

            RedirectToAction("edit", Request.Form);
        }
    }
}
]]></programlisting>
				<para>
					The
					<literal>ARDataBindAttribute</literal>
					extends the
					<literal>DataBindAttribute</literal>
					so the
					<literal>Exclude</literal>
					and
					<literal>Allow</literal>
					properties are still there.
				</para>
				<para>
					However, as you can see, we used
					<literal>AutoLoad=AutoLoadBehavior.Always</literal>
					. This tells the binder to collect the primary key
					value for the customer and load it, then populate
					the object. So all you have to do next is to invoke
					<literal>Save</literal>
					or
					<literal>Update</literal>
					method.
				</para>
			</section>
			<section>
				<title>ARFetchAttribute</title>
				<para>
					The
					<literal>ARFetchAttribute</literal>
					is a simpler version of
					<literal>ARDataBinder</literal>
					. It is in charge of loading the instance from the
					database and nothing more.
				</para>
				<programlisting lang="cs"><![CDATA[
public class CustomerController : ARSmartDispatcherController 
{
    ...

    public void SetPassword([ARFetch("customer.id")] Customer customer, String newPassword)
    { 
        try
        {
            customer.Password = newPassword;
            customer.Save();

            RedirectToAction("index");
        }
        catch(Exception ex)
        {
            Flash["error"] = ex.Message;

            RedirectToAction("changepassword", Request.Form);
        }
    }
}
]]></programlisting>
				<para>
					The optional parameter passed to
					<literal>ARFetch</literal>
					tells it which form field has the primary key value.
					If you don't specify it, it will use the parameter
					name (for the example above it would be
					<literal>customer</literal>
					)
				</para>
				<para>
					You can also specify
					<literal>Required=true</literal>
					which will force it to throw an exception if the
					record is not found:
				</para>
				<programlisting lang="cs"><![CDATA[
public class CustomerController : ARSmartDispatcherController 
{
    ...

    public void SetPassword([ARFetch("customer.id", Required=true)] Customer customer, String newPassword)
    { 
        ...
    }
}
]]></programlisting>
				<para>
					And
					<literal>Create=true</literal>
					, which will create a new object if the primary key
					form field is empty:
				</para>
				<programlisting lang="cs"><![CDATA[
public class CustomerController : ARSmartDispatcherController 
{
    ...

    public void CreateOrModifyCustomer([ARFetch("customer.id", Create=true)] Customer customer, String name, ...)
    { 
        customer.Name = name;
        customer.Save();
    }
}
]]></programlisting>
				<section>
					<title>The AutoLoad Property</title>
					<para>
						It is very important that you know what the
						AutoLoad property means and the behavior it
						governs.
					</para>
					<para>
						<informaltable>
							<tgroup cols="2">
								<colspec colnum="1" colname="col1" />
								<colspec colnum="2" colname="col2" />
								<thead>
									<row>
										<entry>Enum field</entry>
										<entry>Description</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry>
											<literal>Never</literal>
										</entry>
										<entry>
											Means that no autoload
											should be performed on the
											target type or on nested
											types.
										</entry>
									</row>
									<row>
										<entry>
											<literal>Always</literal>
										</entry>
										<entry>
											Means that autoload should
											be used for the target type
											and the nested types (if
											present). This demands that
											the primary key be present
											on the http request for the
											root type and nested.
										</entry>
									</row>
									<row>
										<entry>
											<literal>
												OnlyNested
											</literal>
										</entry>
										<entry>
											Does not load the root type,
											but loads nested types if
											the primary key is present.
											If not present, sets
											<literal>null</literal>
											on nested type. This is
											useful for insertions.
										</entry>
									</row>
									<row>
										<entry>
											<literal>
												NewInstanceIfInvalidKey
											</literal>
										</entry>
										<entry>
											Means that we should
											autoload, but if the key is
											invalid, like
											<literal>null</literal>
											, 0 or an empty string, then
											just create a new instance
											of the target type.
										</entry>
									</row>
									<row>
										<entry>
											<literal>
												NullIfInvalidKey
											</literal>
										</entry>
										<entry>
											Means that we should
											autoload, but if the key is
											invalid, like
											<literal>null</literal>
											, 0 or an empty string, then
											just set
											<literal>null</literal>
											on the nested type.
										</entry>
									</row>
								</tbody>
							</tgroup>
						</informaltable>
					</para>
				</section>
			</section>
		</section>
		<section>
			<title>DataBinding with ActiveRecord</title>

			<para></para>

			<section>
				<title>DataBinding Issues</title>
				<para>
					The combination of databinding and ActiveRecord
					opens the possibility for an error that is most
					often hit by unexperienced users, especially when
					using the recommended
					<ulink
						url="http://using.castleproject.org/display/AR/Enable+Session+per+Request">
						Session Per Request
					</ulink>
					configuration for ActiveRecord. Consider the code
					from above:
				</para>
				<programlisting lang="cs"><![CDATA[
public void Update([ARDataBind("customer", AutoLoad=AutoLoadBehavior.Always)] Customer customer)
{ 
    try
    {
        customer.Update();

        RedirectToAction("index");
    }
    catch(Exception ex)
    {
        Flash["error"] = ex.Message;

        RedirectToAction("edit", Request.Form);
    }
}	
]]></programlisting>
				<para>
					Now, what happens if there is an exception? The
					exception is caught as intended and the error
					message added to the Flash container. But actually,
					you will get an ASP.NET errorpage nonetheless. The
					reason for this behaviour is simple once you know
					how the request is processed in the controller:
					<orderedlist>
						<listitem>
							<para>
								An ActiveRecord SessionScope is created
								in
								<literal>OnBeginRequest()</literal>
							</para>
						</listitem>
						<listitem>
							<para>
								The customer object will be looked up
								from database by its primary key.
							</para>
						</listitem>
						<listitem>
							<para>
								The properties of the customer object
								are updated through databinding.
							</para>
						</listitem>
						<listitem>
							<para>
								<literal>customer.Update()</literal>
								is called and throws an exception.
							</para>
						</listitem>
						<listitem>
							<para>The catch block executes.</para>
						</listitem>
						<listitem>
							<para>
								The ActiveRecord SessionScope is
								disposed in
								<literal>OnEndRequest()</literal>
								:
								<orderedlist>
									<listitem>
										<para>
											NHibernate checks whether
											there are pending changes.
										</para>
									</listitem>
									<listitem>
										<para>
											The customer object is
											marked dirty, because its
											property values have been
											changed during databinding.
										</para>
									</listitem>
									<listitem>
										<para>
											NHibernate flushes the
											session. During the flush,
											the changes of customer
											object are written back to
											the database.
										</para>
									</listitem>
									<listitem>
										<para>
											An unhandled exception
											occurs.
										</para>
									</listitem>
								</orderedlist>
							</para>
						</listitem>
						<listitem>
							<para>
								The exception cannot be handled in your
								controller and an errorpage is shown.
							</para>
						</listitem>
					</orderedlist>
				</para>
				<note>
					<para>
						The same issue appears when using ActiveRecord's
						validation support. Behaviour and reasons are
						identical in that case: The object is not saved
						but changed by the DataBinder and will be saved
						by NHibernate when the session is disposed.
					</para>
				</note>
				<para>
					So, now that the problem is known, how can it be
					handled? There are plenty possible solutions for
					this, depending on the user's needs:
					<orderedlist>
						<listitem>
							<para>
								Make the session readonly and always
								flush it explicitly.
							</para>
						</listitem>
						<listitem>
							<para>
								Remove the offending object from the
								session.
							</para>
						</listitem>
						<listitem>
							<para>
								Create a
								<literal>TransactionScope</literal>
								and roll it back.
							</para>
						</listitem>
						<listitem>
							<para>
								Use the
								<literal>Validate</literal>
								option of
								<literal>ARDataBind</literal>
							</para>
						</listitem>
					</orderedlist>
				</para>
			</section>
			<section>
				<title>Possible Solutions</title>
				<para></para>
				<section>
					<title>Using a Read-Only Session</title>
					<para>
						If you change the
						<literal>SessionScope</literal>
						to not automatically flush, changes are not
						flushed on disposal of the scope. You can setup
						the scope as shown below (based on
						<ulink
							url="http://using.castleproject.org/display/AR/Enable+Session+per+Request">
							this article
						</ulink>
						):
					</para>
					<programlisting lang="cs"><![CDATA[
// GlobalApplication.cs
public void OnBeginRequest(object sender, EventArgs e)
{
    HttpContext.Current.Items.Add("nh.sessionscope", new SessionScope(FlushAction.Never);
}		
]]></programlisting>
					<para>
						Doing so requires you to flush your sesssion
						manually in every controller that changes
						existing objects or introduces new objects to
						the database. There are two possibilities to get
						the session object to flush:
					</para>
					<programlisting lang="cs"><![CDATA[
// Use this when the session was added to the HttpContext in OnBeginRequest
((SessionScope)Context.Items["nh.sessionscope"]).Flush();
]]></programlisting>
					<programlisting lang="cs"><![CDATA[
// Gets the session, if it is not stored in a known place.
ActiveRecordMediator
    .GetSessionFactoryHolder()
    .CreateSession(typeof(Customer))
    .Flush();
]]></programlisting>
				</section>
				<section>
					<title>
						Removing Invalid Objects From the Session
					</title>
					<para>
						Another possibility is to keep the default
						behaviour and only assure that invalid objects
						are not flushed on disposal of the session. This
						strategy is recommended when there are objects
						that need to be saved to the database even when
						one object is invalid and must not be stored.
					</para>
					<para>
						You might also want to use this strategy when
						you are using Windsor integration and the
						ActiveRecordIntegration facility, because in
						this case you cannot change the session to be
						read-only within your code.
					</para>
					<para>
						To remove the conflicting object from the
						<literal>SessionScope</literal>
						, you must
						<literal>Evict</literal>
						it:
					</para>
					<programlisting lang="cs"><![CDATA[
ActiveRecordMediator
    .GetSessionFactoryHolder()
    .CreateSession(typeof(Customer))
    .Evict(customer);
]]></programlisting>
					<para>
						By using the
						<literal>ActiveRecordMediator</literal>
						, you will get access to the session regardless
						where it as been originally created.
					</para>
				</section>
				<section>
					<title>Using TransactionScope</title>
					<para>
						Another method is to wrap the validation in a
						transaction. If the validation fails, the
						transaction must be rolled back:
					</para>
					<programlisting lang="cs"><![CDATA[
using (TransactionScope tx = new TransactionScope())
{
    try
    {
        customer.Update();
        RedirectToAction("index");
    }
    catch(Exception ex)
    {
        Flash["error"] = ex.Message;
		tx.Rollback();
        RedirectToAction("edit", Request.Form);
    }
}
]]></programlisting>
					<para>
						You might wonder how this works because I wrote
						above that the DataBinder makes the offending
						changes outside of the
						<literal>TransactionScope</literal>
						. The answer is that TransactionScopes can be
						nested and that there is an implicit transaction
						started during the creation of the
						<literal>SessionScope</literal>
						. The rollback is then propagated to that
						transaction and all changes are discarded.
					</para>
					<para>
						However, that means that if you have other
						objects that must be saved, you should instead
						evict the invalid object as descibed
						<ulink url="#evicting">above</ulink>
					</para>
				</section>
				<section>
					<title>Validation During DataBinding</title>
					<para>
						The most elegant method to circumvent such
						problems is the use of the Castle Validation
						component. By setting the parameter
						<literal>Validate</literal>
						of the
						<literal>ARDataBind</literal>
						-attribute to
						<literal>true</literal>
						, MonoRail performs validation of the input data
						before changing the properties based on the
						<literal>Validate</literal>
						<emphasis>XXX</emphasis>
						-Attributes of the ActiveRecord model classes.
					</para>
					<para>
						The drawback is that invalid data is completely
						discarded and will not redisplayed to the client
						by
						<literal>FormHelper</literal>
						. In order to access the data,
						<literal>Request.Params</literal>
						must be used.
					</para>
					<programlisting lang="cs"><![CDATA[
public void Update(
    [ARDataBind("customer", 
        AutoLoadBehavior.NewRootInstanceIfInvalidKey, 
        Validate = true)] Customer customer)
{
    if (ValidationSummaryPerInstance[info].ErrorsCount > 0)
    {
        string msg = "Please correct errors:";
        foreach (string p in ValidationSummaryPerInstance[customer].InvalidProperties)
        {
            msg += "<p>" + p + ":</p>";
            foreach (string m in ValidationSummaryPerInstance[customer].GetErrorsForProperty(p))
            {
                msg += string.Format("<p>{0}</p>", m);
            }
        }
        Flash["message"] = msg;
        Flash["customer"] = customer;
        RedirectToReferrer();
        return;
    }
	// "Normal" application flow
	// ...
}
]]></programlisting>
				</section>
			</section>
		</section>
	</section>