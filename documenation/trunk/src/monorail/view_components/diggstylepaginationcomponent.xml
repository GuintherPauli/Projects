<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../../toolchain/docbook-xml/docbookx.dtd">
<section>
	<title>DiggStylePaginationComponent</title>
	<para>
		The DiggStylePagination component allows to create standardized
		but customizable pagination links for use with MonoRail's
		<ulink url="..\helpers\pagination\index.html">
			PaginationHelper
		</ulink>
		.
	</para>
	<para>
		You can download the complete sourcecode for the examples below:

		<note>
			<para>
				A sample demonstrating the concepts in the section can
				be downloaded from
				!download/monorail/trunk/MonoRail.DiggStylePagination.zip
			</para>
		</note>

	</para>
	<section>
		<title>Basic Usage</title>
		<para>
			Suppose you have a list of about 200 items to display. Using
			MonoRail it is easy to create a pagination for that items,
			such that only 20 at a time are displayed:
		</para>
		<programlisting lang="cs"><![CDATA[
public class HomeController : SmartDispatcherController
{
	public void Index()
	{
            PropertyBag["items"] =
                PaginationHelper.CreatePagination<MyEntity>(
                    this, // controller
                    MyEntity.FindAll(new Order("Index", true)), // list
                    10 // number of items per page
                );
	}
}
]]></programlisting>
		<para>
			<literal>items</literal>
			is an instance of
			<literal>IPaginatedPage</literal>
			. It can be used like a list in NVelocity templates.
			Additionally, it has properties to determine the current
			status of the pagination. These properties can be used to
			create pagination links, which is described in the
			<ulink url="..\helpers\pagination\index.html">
				PaginationHelper
			</ulink>
			documentation.
		</para>
		<para>
			However, building pagination links is a repeating task that
			should be automated. This is what the
			DiggStylePaginationComponent does.
		</para>
		<programlisting lang="html"><![CDATA[
<table>
	<tr>
		<th>Name</th>
		<th>Index</th>
	</tr>
#foreach($row in $items)
	<tr>
		<td>$row.Name</td>
		<td>$row.Index</td>
	</tr>
#end
	<tr>
    	<td colspan="2">
#component(DiggStylePagination with "page=$items")
		</td>
	</tr>
</table>
]]></programlisting>
		<para>
			This creates a production ready pagination line as shown in
			the picture below:
		</para>
		<mediaobject>
			<imageobject>
				<imagedata
					fileref="images/DiggPaginationBasicResults.png" />
			</imageobject>
		</mediaobject>
	</section>
	<section>
		<title>Customizing Captions</title>
		<para>
			When creating a non-english application, the labels
			<literal>&amp;laquo; prev</literal>
			and
			<literal>next &amp;raquo;</literal>
			don't make any sense. This can be changed by using a
			DiggStylePagination blockcomponent and sections to customize
			the link text:
		</para>
		<programlisting lang="html"><![CDATA[
...data same as above...
<tr>
    <td colspan="2">
#blockcomponent(DiggStylePagination with "page=$items")
    #prev
        &laquo;
    #end
    #next
        &raquo;
    #end
#end
    </td>
</tr>
]]></programlisting>
		<para>
			You can see the results below. Pay attention to encircled
			links.
		</para>
		<mediaobject>
			<imageobject>
				<imagedata
					fileref="images/DiggPaginationNextPrevResults.png" />
			</imageobject>
		</mediaobject>
	</section>
	<section>
		<title>Suppressing Display</title>
		<para>
			The problem is that if there are less items than the
			specified page size, the pagination is still displayed.
		</para>
		<mediaobject>
			<imageobject>
				<imagedata
					fileref="images/DiggPaginationOnePageResults1.png" />
			</imageobject>
		</mediaobject>
		<para>
			This can be suppressed by specifiying the parameter
			<literal>RenderIfOnlyOnePage</literal>
			.
		</para>
		<programlisting lang="html"><![CDATA[
...data same as above...
<tr>
    <td colspan="2">
#component(DiggStylePagination with "page=$items" "renderifonlyonepage=false")
    </td>
</tr>
]]></programlisting>
		<para>
			This removes the pagination itself from the page, but the
			surrounding table cell is still rendered. In this example
			this is visible by a thicker bottom border, but depending on
			the stylesheet this might lead to more ugly effects.
		</para>
		<mediaobject>
			<imageobject>
				<imagedata
					fileref="images/DiggPaginationOnePageResults2.png" />
			</imageobject>
		</mediaobject>
		<para>
			To prevent this, it is possible to render the surrounding
			HTML by using the sections
			<literal>startblock</literal>
			and
			<literal>endblock</literal>
			. That way the HTML is only rendered when the pagination is
			needed.
		</para>
		<programlisting lang="html"><![CDATA[
...data same as above...
#blockcomponent(DiggStylePagination with "page=$items" "renderifonlyonepage=false")
#startblock
<tr>
    <td colspan="2">
#end
#endblock
    </td>
</tr>
#end
#end
]]></programlisting>
		<mediaobject>
			<imageobject>
				<imagedata
					fileref="images/DiggPaginationOnePageResults3.png" />
			</imageobject>
		</mediaobject>
	</section>
	<section>
		<title>Changing Link Styles</title>
		<para>
			Rectangular, button-like links are perhaps not your
			preferred style of displaying the pagination. When you need
			to change the way links are displayed, you must do so by
			using CSS classes.
		</para>
		<para>
			DiggStylePaginationComponent emits the style within the HTML
			links, so you need to both specify CSS classes and force the
			component to use these classes.
		</para>
		<programlisting lang="html"><![CDATA[
...data same as above...
<tr>
    <td colspan="2">
#component(DiggStylePagination with "page=$items" "useinlinestyle=false")
    </td>
</tr>
]]></programlisting>
		<para>This results in the following HTML rendered:</para>
		<programlisting lang="html"><![CDATA[
<div class="pagination">
	<span class="disabled">&laquo; prev</span>
	<span class="current">1</span>
	<a href="/home/index6.rails?page=2">2</a>
	<a href="/home/index6.rails?page=3">3</a>
	<a href="/home/index6.rails?page=4">4</a>
	<a href="/home/index6.rails?page=5">5</a>
	<a href="/home/index6.rails?page=6">6</a>
	&#8230;<a href="/home/index6.rails?page=19">19</a>
	<a href="/home/index6.rails?page=20">20</a>
	<a href="/home/index6.rails?page=2">next &raquo;</a>
</div>
]]></programlisting>
		<para>
			This allows you to customize the output using the following
			CSS classes:
			<itemizedlist>
				<listitem>
					<para>
						<literal>pagination</literal>
						for the complete box containing the pagination.
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>disabled</literal>
						for "buttons" that are not disabled.
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>current</literal>
						for displaying the current page number.
					</para>
				</listitem>
			</itemizedlist>
			Additionnally, you must specify CSS commands for
			<literal>.pagination a</literal>
			if you want to customize the links themselves.
		</para>
		<para>
			Here is a comprehensive example that shows all four options:
		</para>
		<programlisting lang="html"><![CDATA[
<style type="text/css" media="screen">
    .pagination {
        /* Complete box */
        background-color: yellow;
        font-size: large;
    }
    
    .pagination a {
        /* links */
        color: red;
    }
    
    .disabled {
        /* disabled "buttons" */
        color: purple;
    }
    
    .current {
        /* current page */
        color: blue;
    }
</style>
]]></programlisting>
		<para>This one renders like shown below:</para>
		<mediaobject>
			<imageobject>
				<imagedata fileref="images/DiggPaginationClasses.png" />
			</imageobject>
		</mediaobject>
	</section>
	<section>
		<title>Changing the Number of Links Displayed</title>
		<para>
			If you have a look at the pictures above, you might have
			noticed that not all pages are linked. By default, only the
			two pages before and after the current page are linked
			directly to save space. It is possible to customize the
			number of links to be displayed on each side of the current
			page before the ellipsis with the parameter
			<literal>adjacents</literal>
			.
		</para>
		<para>
			However, the algorithm used doesn't work well with large
			numbers, so you should use one of the following values:
			<itemizedlist>
				<listitem>
					<para>
						<literal>0</literal>
						or
						<literal>1</literal>
						for very narrow tables
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>3</literal>
						for wide tables with a small number of expected
						pages. This setting suppresses rendering
						ellipsis for less than ten pages.
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>2</literal>
						or nothing (it is the default) for the rest.
					</para>
				</listitem>
			</itemizedlist>
		</para>
	</section>
	<section>
		<title>Customizing Actions</title>
		<para>
			So far, we have only changed how the links are displayed.
			This is good enough for simple pages, but if you provide
			means of searching or filtering the data, you must come up
			with a possibility to save the parameters for fetching data
			of the different pages.
		</para>
		<para>
			Though it is not directly visible to the programmer, any
			time a different page is displayed, there is a roundtrip to
			the server using the original controller action. This means
			that for paging search results, you must pass the search
			parameters to the controller along with the pagination
			links.
		</para>
		<para>
			This can be done using different techniques:
			<itemizedlist>
				<listitem>
					<para>
						Storing the search or filter params in the
						sessions. Some users are quite fond of this,
						because they always need the same subset of
						results. Others, however, are constantly
						searching for "disappeared" rows, so you should
						not use session variables only for
						round-trip-conservation of parameters.
					</para>
				</listitem>
				<listitem>
					<para>
						Adding the search parameters to the URL of the
						page links. This is the preferable solution for
						most simple searches and filters.
					</para>
				</listitem>
				<listitem>
					<para>
						Calling a JavaScript function from the links.
						Then use either AJAX for exchanging the rows to
						be displayed or construct an URL using
						JavaScript.
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<section>
			<title>Adding Parameters to the URL</title>
			<para>
				The simplest method is specifying the URL to invoke by
				using the
				<literal>url</literal>
				parameter of the DiggStylePaginationComponent. This
				allows you to add the needed query params.
			</para>
			<para>
				If you look at the example of doing this below, you
				should notice that the URL is assembled in an extra
				<literal>#set</literal>
				-statement. This is intentional; you cannot specify a
				string as parameter value that contains parameters
				itself.
			</para>
			<programlisting lang="html"><![CDATA[
<table>
	<tr>
		<th>Name</th>
		<th>Index</th>
	</tr>
#foreach($row in $items)
	<tr>
		<td>$row.Name</td>
		<td>$row.Index</td>
	</tr>
#end
	<tr>
		<td colspan="2">
#set ($url="index8.rails?desc=$desc")
#component(DiggStylePagination with "page=$items" "url=$url")
## The statement below won't work!
##component(DiggStylePagination with "page=$items" "url='index8.rails?desc=$desc'")
		</td>
	</tr>
</table>
<a href="index8.rails">Ascending list</a> &mdash; 
<a href="index8.rails?desc=true">Descending list</a>
]]></programlisting>
		</section>
		<section>
			<title>Javascript Functions as Link Targets</title>
			<para>
				From the pagination side of view, this is dead simple.
				Just specify the name of a JavaScript function defined
				elsewhere in the page and it will be called with the
				page number as a parameter on every pagination link
				click.
			</para>
			<para>
				DiggStylePagination however doesn't help with consuming
				this information, so it is not recommended unless you
				are using AJAX nonetheless.
			</para>
			<programlisting lang="html"><![CDATA[
...data same as above...
<tr>
    <td colspan="2">
#component(DiggStylePagination with "page=$items" "paginatefunction=foo")
    </td>
</tr>
<script type="text/javascript">
    function foo(page)
    {
        var a = new AjaxMagicObject();
        a.page = page;
        a.fetchAndDisplayData();
    }
</script>
]]></programlisting>
			<para>
				DiggStylePagination will render this as
				<literal>javascript:foo(page);void(0);</literal>
				, so you really need to specify only the function name.
			</para>
		</section>
		<section>
			<title>Building Links the #link</title>
			<para>
				If all else fails, you can provide a block for creating
				the links. Just be warned, this should really be used
				only if all else fails; because there is no automation,
				you need to create all the HTML by yourself.
			</para>
			<para>
				To build your links, you get the following variables as
				parameters:
				<itemizedlist>
					<listitem>
						<para>
							<literal>$pageIndex</literal>
							contains the page number of the link to
							render.
						</para>
					</listitem>
					<listitem>
						<para>
							<literal>$url</literal>
							contains the url to the controller action.
							If it wasn't specified via the url-parameter
							discussed above, it is simple an URL to the
							current page.
						</para>
					</listitem>
					<listitem>
						<para>
							<literal>$text</literal>
							contains the text that would have been
							rendered by the default render functions.
							This is either a number, prev, next or a
							custom text specified using
							<literal>#prev</literal>
							or
							<literal>#next</literal>
							.
						</para>
					</listitem>
				</itemizedlist>
				To get a working pagination, you must not forget to pass
				a parameter named
				<literal>page</literal>
				to the controller action.
			</para>
			<para>
				Using
				<literal>#link</literal>
				has the caveat, that it is not called for
				<itemizedlist>
					<listitem>
						<para>rendering the current page</para>
					</listitem>
					<listitem>
						<para>rendering ellipsis</para>
					</listitem>
					<listitem>
						<para>rendering disabled links</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				The following examples renders all links as buttons. The
				(imperfect) result is shown below.
			</para>
			<programlisting lang="html"><![CDATA[
<tr>
    <td colspan="2">
#blockcomponent(DiggStylePagination with "page=$items")
#link
<button type="button" onclick="location.href='$url?page=$pageIndex';">$text</button>
#end
#end
    </td>
</tr>
]]></programlisting>
			<mediaobject>
				<imageobject>
					<imagedata
						fileref="images/DiggPaginationButtons.png" />
				</imageobject>
			</mediaobject>
		</section>
	</section>
</section>