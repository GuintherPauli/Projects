<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "../../toolchain/docbook-xml/docbookx.dtd">
<chapter id="installation">
	<title id="installation.title">Installation</title>
	<section>
		<title>Introduction</title>
		<para>
			Installation deals with setting up an environment on a
			server.
		</para>
	</section>
	<section>
		<title>Running Under IIS</title>
		<para>
			If you are running IIS, then you need to associate the the
			extension you want to use for MonoRail with ASP.Net ISAPI.
			This is a very simple operation. If you are concerned about
			shared hosting see the last section on this document.
		</para>
		<para>
			Usually the extension is
			<literal>rails</literal>
			or
			<literal>castle</literal>
			, but you can use whatever extension you want.
		</para>
		<para>First step: open the IIS MMC</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/Mrconf0.png" />
				</imageobject>
			</mediaobject>
		</para>
		<para>
			<orderedlist>
				<listitem>
					<para>
						Right-click the
						<literal>Default Web Site</literal>
						item and choose
						<guimenuitem>Properties</guimenuitem>
					</para>
				</listitem>
				<listitem>
					<para>
						Select the
						<literal>Home Directory</literal>
						tab
					</para>
				</listitem>
				<listitem>
					<para>
						Click
						<guibutton>Configuration</guibutton>
					</para>
				</listitem>
			</orderedlist>
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/Mrconf1.png" />
				</imageobject>
			</mediaobject>
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/Mrconf2.png" />
				</imageobject>
			</mediaobject>
		</para>
		<para>
			<orderedlist>
				<listitem>
					<para>
						Click
						<guibutton>Add</guibutton>.
					</para>
				</listitem>
				<listitem>
					<para>
						Select the
						<literal>ISAPI.DLL</literal>
						. You can copy-and-paste the complete DLL
						file name from another extension, such as
						<literal>.aspx</literal>
						. In most systems it will be something like
						<filename>
							C:\WINDOWS\Microsoft.NET\Framework\v1.1.4322\aspnet_isapi.dll
						</filename>
						(for .NET 1.1) or
						<filename>
							C:\WINDOWS\Microsoft.NET\Framework\v2.0.50727\aspnet_isapi.dll
						</filename>
						(for .NET 2.0).
					</para>
				</listitem>
				<listitem>
					<para>
						Fill in the extension (for example
						<literal>.rails</literal>
						) as the file extension (make sure you do not
						omit the leading dot).
					</para>
				</listitem>
				<listitem>
					<para>
						Uncheck	the
						<guilabel>Check file exists</guilabel>
						check box.
					</para>
				</listitem>
			</orderedlist>
		</para>
		<note>
			<para>
				<emphasis>Windows XP Pro users</emphasis>
				: If your
				<guibutton>OK</guibutton>
				button is disabled even if you have
				Administrator rights click in the
				<guilabel>Executable</guilabel>
				text field. This will expand the relative path to the
				dll into a full path and will enable the
				<guibutton>OK</guibutton>
				button.
			</para>
		</note>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/Mrconf3.png" />
				</imageobject>
			</mediaobject>
		</para>
	</section>
	<section>
		<title>Using Casini</title>
		<para>
			<ulink
				url="http://www.asp.net/Projects/Cassini/Download/Default.aspx?tabindex=0&amp;tabid=1">
				Cassini
			</ulink>
			is the easiest way to run the application as it requires
			nothing to be configured. It is suitable for development.
			You can run it from VS.Net and then be able to debug your
			application easily.
		</para>
		<para>
			<mediaobject>
				<imageobject>
					<imagedata fileref="images/vsproppages_cassini.jpg" />
				</imageobject>
			</mediaobject>
		</para>
		<para>
			If you are using Visual Studio 2005, then you might want to
			use the integrated web server as it is basically the same.
		</para>
	</section>
	<section>
		<title>Mono with XSP</title>
		<para>
			Open a shell and go to directory containing web.config. Call
			xsp:
		</para>
		<programlisting><![CDATA[xsp --port 80]]></programlisting>
		<para>
			Notice that Apache2 + mod_mono is much more efficient than
			XSP. Use XSP only for tests and small applications
			development.
		</para>
	</section>
	<section>
		<title>Mono with Apache</title>
		<para>
			We assume that you have Apache Httpd, mod_mono and xsp from
			the Mono Project installed.
		</para>
		<section>
			<title>Configuration</title>
			<para>Add the following lines to your httpd.conf:</para>
			<programlisting><![CDATA[
LoadModule mono_module modules/mod_mono.so
AddHandler mono .rails .aspx .ashx .asmx .ascx .asax .config .ascx
MonoRunXSP True

Alias /test "/web/test"
AddMonoApplications default "/test:/web/test"
<Location /test>
	SetHandler mono
</Location>
]]></programlisting>
			<para>
				The first line adds the mod_mono module to Apache.

				The second line sets up mod_mono to handle asp.net and
				MonoRail file extensions.

				The third line allows Apache to start and stop the
				mod_mono_server process.

				The following group of lines sets up /test to map to
				your application.
			</para>
		</section>
		<section>
			<title>Apache Httpd2</title>
			<para>
				If you build Mod_mono from sources, file mod_mono.conf
				will be installed at <filename>/etc/apache2/mod_mono.conf</filename>. To load
				the module you only need to create a symlink and reload
				Apache:
			</para>
			<programlisting><![CDATA[
ln -s /etc/apache2/mond_mono.conf /etc/apache2/mods-enabled/
]]></programlisting>
			<para>
				Place the configuration above on
				<filename>/etc/apache2/sites-enabled/default</filename> and change "Location"
				for "Directory" if your website lives in filesystem
				(http://httpd.apache.org/docs/2.2/mod/core.html#location).
				<filename>/etc/apache2/sites-enabled/default</filename>:
			</para>
			<programlisting><![CDATA[
AddHandler mono .rails .aspx .ashx .asmx .ascx .asax .config .ascx
Alias /example /var/www/example
AddMonoApplications default "/example:/var/www/example"
MonoRunXSP True
<Directory /var/www/example>
	SetHandler mono
</Directory>
]]></programlisting>
			<para>
				Paths could change depending of your distribution
			</para>
		</section>
		<section>
			<title>Application Deployment</title>
			<para>
				To deploy, simply copy your webapp's bin and Views
				directory as well as Global.asax and your web.config
				files to /web/test and then start Apache.
			</para>
			<para>
				You can now point your browser at
				<literal>http://yourserver.com/test/index.rails</literal> or which ever
				<literal>.rails</literal> page you choose.
			</para>
		</section>
	</section>
	<section>
		<title>Deploying to a Shared Host</title>
		<para>
			On a shared hosting, you may not be able to convince the
			host to map .rails extentions to the ASP.Net framework,
			which means that you wouldn't be able to "catch" a request
			for a rails document and map it to the appropriate
			controller.
		</para>
		<para>
			A simple solution for this problem is to just switch to
			<literal>.aspx</literal> extention (and change the httpHandler configuration,
			of course). For example:
		</para>
		<programlisting lang="xml"><![CDATA[
<httpHandlers>
	<add verb="*" path="*.ashx" 
	   type="Castle.MonoRail.Framework.MonoRailHttpHandlerFactory, Castle.MonoRail.Framework" />
</httpHandlers>
]]></programlisting>
	</section>

</chapter>