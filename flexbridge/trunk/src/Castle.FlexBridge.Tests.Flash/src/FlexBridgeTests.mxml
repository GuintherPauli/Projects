<!--
  Copyright 2007 Castle Project - http://www.castleproject.org/
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
   
      http://www.apache.org/licenses/LICENSE-2.0
 
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute"
	xmlns="*"
	xmlns:flexunit="flexunit.flexui.*"
	creationComplete="onCreationComplete()">
	
	<mx:Script>
	<![CDATA[
	    import flexunit.runner.BaseTestRunner;
	    import flexunit.framework.TestResult;
	    import castle.flexbridge.tests.kernel.DefaultKernelTest;
	    import castle.flexbridge.tests.reflection.ReflectionUtilsTest;
	    import castle.flexbridge.tests.integrationTestHarness.MethodResult;
	    import castle.flexbridge.tests.integrationTestHarness.RemoteObjectTestProxy;
	    import mx.utils.URLUtil;
		import flash.net.registerClassAlias;
		import flexunit.framework.TestSuite;
		
		private var remoteObjectTestProxy:RemoteObjectTestProxy;
		
		[Bindable]
		private var testReport:TestReport;
		private var finalTestReport:String;
		
		private function onCreationComplete():void
		{
			var mode:String = "testRunner";

            var parameters:Object = application.owner.root.loaderInfo.parameters;
            if (parameters != null)
            {
                if ("mode" in parameters)
                    mode = String(parameters["mode"]);
            }
			
			if (mode == "integrationTestHarness")
			{
				runIntegrationTestHarness();
			}
			else if (mode == "testReport")
			{
			    runTestReport();
			}
			else if (mode == "testRunner")
			{
				runTestRunner();
			}
 		}
 		
 		private function runIntegrationTestHarness():void
 		{
 		    this.currentState = "integrationTestHarness";
 		    
			registerClassAlias("integrationTestHarness.MethodResult", MethodResult);
			
			remoteObjectTestProxy = new RemoteObjectTestProxy();
			remoteObjectTestProxy.installExternalInterface();
 		}
 		
 		private function runTestRunner():void
 		{
 		    this.currentState = "testRunner";
 		    
 			testRunner.test = createSuite();
 			testRunner.startTest();
 		}
 		
 		private function runTestReport():void
 		{
 		    this.currentState = "testReport";
 		    
 		    ExternalInterface.addCallback("getTestReport", getTestReport);
 		    
 		    testReport = new TestReport();
 		    testReport.runTests(createSuite()).onCompletionDo(function(result:Object, error:Error):void
 		    {
 		        finalTestReport = testReport.report;
 	        });
 		}
 		
 		private function getTestReport():String
 		{
 		    return finalTestReport;
 		}
		
		private function createSuite():TestSuite
		{
 			var suite:TestSuite = new TestSuite();
 			
 			suite.addTestSuite(ReflectionUtilsTest);
 			suite.addTestSuite(DefaultKernelTest);
 			
 			return suite;
 		}
	]]>
	</mx:Script>

    <mx:states>
        <mx:State name="testRunner">
            <mx:AddChild>
            	<flexunit:TestRunnerBase id="testRunner" width="100%" height="100%" />
            </mx:AddChild>
        </mx:State>
        
        <mx:State name="testReport">
            <mx:AddChild>
                <mx:TextArea editable="false" width="100%" height="100%" text="{testReport != null ? testReport.report : ''}" />
            </mx:AddChild>
        </mx:State>
        
        <mx:State name="integrationTestHarness">
            <mx:AddChild>
                <mx:Label text="Integration Test Harness -- Access from tests using ExternalInterface." />
            </mx:AddChild>
        </mx:State>        
    </mx:states>
</mx:Application>