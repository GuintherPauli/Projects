New:
- Model wide relation type, per-relation basis inheritable and overridable (Patch: Patrick Earl)
- Custom CollectionType support  (Patch: Patrick Earl)
- Better visual feedback when mouseover connector lines. (http://www.ticklishtechs.net/2008/06/26/visual-feedback-for-black-connectors-on-mouse-over/)
- Custom collection types at the model level. (Patch: Patrick Earl)
- CollectionID support for IdBag on many-to-many. (Patch: Patrick Earl)
- Helper class for assisting in type registration. (Patch: Patrick Earl)
- Optional property generation support. (Patch: Patrick Earl)
- support for double derived classes. (Patch: Patrick Earl)
- Automatic bi-directional property updates (Patch: Patrick Earl)
- Allow C# virtual events so PropertyChanged and Lazy classes work in as many cases as possible. (Patch: Patrick Earl)
- Foreign key column name formatting and many-to-many table and column name generation. (Patch: Patrick Earl)
- Ability to add a surrogate primary key to classes that don't already have primary keys specified. (Patch: Patrick Earl)

Preview 4.1

New:
- Optionally generates classes implementing INotifyPropertyChanging.
- Contrib-117: Database and designer column order is not in sync

Fixed:
- Added "Nested" to Common.ARAttributes (Patch: Roberto Paterlini)
- Swapped parameters in new ArgumentNullException (Patch: Roberto Paterlini)
- Changed in-memory code compilation error reporting to give full details of the internal compile process. No more ExceptionCollection's.
- Contrib-118: Activewriter errors in combination with VisualSVN (Patch: Visual SVN Team)
- Changed the temporary file generation to use \obj folder rather than arbitrary locations on the system.

Preview 4

New:
- Added support for Flush for ManyToOneRelation
- Added partial Oracle drag and drop support. (Patch: Yavor Shahpasov)
- Generates metadata about properties to be used in queries (as in ICriterion selectCriterium = Expression.Eq(User.Properties.Name, name); )(Thanks: Rudi van den Belt)
- Contrib-30: Add flag to property to mark it with the DefaultMemberAttribute (or do it by default for primary key fields) (Thanks: Michael Hawksworth)
- Contrib-50: (Revised description) Allow user defined imports to replace generated imports. (Thanks: Michael Hawksworth)
- Contrib-54: Integrate NHibernateQueryGenerator into ActiveWriter (Thanks: Steve Degosserie)
- Contrib-81: Added list relation type. (Patch: Grimace of Despair)
- Moved all to vS2008
- Moved binaries license from "as is" to Apache v2. We don't need DSL Tools redistributables in setup package anymore.

Fixed:
- ManyToOne SourceNotNull is now working propertly
- Incorrectly generates Some pascal case fields as camel case.
- Contrib-52: (Revised description) Generic types are incorrectly generated if the given type name already includes generic parameters. (Thanks: Hugo Burm)
- CONTRIB-59: (Revised description) Problems with NHQG integration when the temporary path, used for out argument, contains spaces. (Patch: Steve Degosserie)
- Contrib-56: When creating a many-one relation, the generation of the Ilist should always be generic, independent of the generic settings for the objects. (Thanks: Robert van Hoornaar)
- Contrib-61: (If the namespace cannot be retrieved from the VS project system) When a class is added to a model, the .hbm.xml file that is added as a nested file is missing the first character of the class name in the filename. (Thanks: David Gardiner)
- Contrib-63: VB projects can have a default root Namespace. ActiveWriter should take this into account when generating the mapping files. It currently appears to only use the model's Namespace property. (Patch: David Gardiner)
- Contrib-66: The private field used by the relation properties should be initialised with a constructor (Patch: David Gardiner) (Added as a model level option, defaults to false)
- Contrib-69: Generated VB code should respect project's Option Strict setting (Patch: David Gardiner)
- Contrib-70: Using a custom type that is defined in a user project fails (Partial patch: David Gardiner)
- Contrib-72: Option to remove prefix from generated property names.(Patch: David Gardiner) (Implemented as model level RegEx)
- Contrib-73: Look for Castle.ActiveWriter and NHibernate in project references. (Patch: David Gardiner)
- Oracle support is now fully working (Patch: Marjan Flis)

Preview 3.1

New:
- CONTRIB-31: "Lazy" One-to-One relation. (Thanks: Gabriel Schenker)

Fixed:
- Server Explorer drag'n drop is now supported on international versions of VS. (Patch: Daniel Rothmaler)
- Server Explorer support changed to VS Connection Service and its Connection Hierarchies, instead of the Server Explorer's UIHierarchies to
  prevent the flicker during the hierarchy traversing process.  (Patch: Daniel Rothmaler)
- Closing Contrib-25. ValidateNotSameAttribute Won't be supported ATM.
- CONTRIB-33: When adding a table (SQL Server) to the designer which has a primary key of type uniqueidentifier ActiveWriter should use "Guid" instead of "Native" as generator (Thanks: Gabriel Schenker)
- Assembly names in NHibernate configs are incorrectly stripped from the name. (Thanx: Fedde)
- Removed dependency to MySQL.Data.dll to prevent runtime version conflicts. Moved to IDbConnection for all metadata retrieval jobs. (Thanks: Joao Paulo Marques and Shane)

Preview 3

New:
- Now optionally generates NHibernate hbm.xml files.
- Namespace in generated code is now customizable (Idea: Robert van Hoornaar)
- Imports in generated code is now customizable (Idea: Robert van Hoornaar)
- Model classes can override model level base class definition. (Patch: Robert van Hoornaar)
- Model classes can override model level generics generation. (Idea: Robert van Hoornaar)
- Contrib-26: Add support for AR Nested / NH Component mappings. Allow the ability to specify a column prefix for active record. (thx: Adam Tybor)
- Optionally generates classes implementing INotifyPropertyChanged.
- Support for drag-drop from Server Explorer for MySQL databases. Requires MySQL Connector/Net (5.1). (Patch: Michael Morton)
- Support for custom types through IUserType. See http://support.castleproject.org/browse/CONTRIB-28#action_11456 for usage. (Patch: Ricardo Stuven)
- Ability to define a nested class with a different property name than the nested class (Idea: Craig Neuwirt)

Fixed:
- Contrib-23: Produces CascadeEnum instead of ManyRelationCascadeEnum
- Ability to generate virtual properties to support Lazy properly (thx: Ayende)
- Make sure that Char and AnsiChar types are treated as a System.String types, instead of System.Char types (patch: Ayende)
- HasAndbelongToMany does not take custom property names and not found behavior into account.
- Can’t add a Many To Many relationship to 2 entities when the Class and Table names are different.
- Column keys in many-to-one relations is not optional. (Patch: Robert van Hoornaar)
- Partially fixing NHibernate code generation errors. Now works with a workaround.
- Nullable types only when NotNull=false (Patch: Ricardo Stuven)

Preview 2

New:
- Built with VS SDK v4
- Generics support (ActiveRecordBase<T> & ActiveRecordValidationBase<T>) (Generics is the default in the designer)
- VB.NET seems OK (Not tested extensively).
- Auto-sensing project type (C# or VB.NET) for code generation. You don't have to set that in the model anymore.
- New ActiveWriter Class Details toolwindow. Can be used for rapidly adding class properties. (Idea: Ayende)
- AR validators are supported for each property (not for field, key, composite key, timestamp or version) through a designer.
- Ability to customize the base class. You can substitude your own base class from the editor or generate classes without a base class.
- Ability to customize the source property name for associations. This is necessary for hierarchical objects, where they point to themselves, and using the class name resulted in un-compilable code in previous build. (Reported By: Ayende)
- More domain consistency check through validations when opening / saving.
- Applying pluralizing rules to the table name from the entity name if not specified. (Idea: Ayende)
- Ability to select a property for optional DebuggerDisplay attribute.
- Ability to decorate classes with GeneratedCodeAttribute.
- No more setting Custom Tool property of an .actiw file to ActiveWriterCodeGenerator manually after creating the file. It's done automatically. (Thanks: Bogdan Pietroiu)
- Key icon decorator on class shapes if a primary or composite key property exists (pure cosmetic).
- Key icon decorator on class shapes if at least a property has validator(s) set (pure cosmetic).
- Connector shapes changed to a more-UML-like notation.
- Extended nullable support. You may choose between nullables through external Nullables library (1.1 style) or native nullables usage of 2.0 framework.
- Some added properties to support changes (not all) in Castle trunk for ActiveRecordAttribute, PropertyAttribute etc.

Less:
- Using Output window less when doing drag-drop from Server Explorer to prevent a bug.