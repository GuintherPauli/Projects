//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Debugging.Tests {
    using System;
    using System.Collections;
    using Castle.ActiveRecord;
    
    
    [ActiveRecord()]
    public partial class SimpleClass : ActiveRecordBase {
    }
    
    [ActiveRecord()]
    public partial class ClassWithProperties : ActiveRecordValidationBase {
        
        private string _simpleProperty;
        
        private int _customizedProperty;
        
        private string _propertyWithValidators;
        
        [Property(ColumnType="String")]
        public string SimpleProperty {
            get {
                return this._simpleProperty;
            }
            set {
                this._simpleProperty = value;
            }
        }
        
        [Property("column", ColumnType="Int32", CustomAccess="customAccess", Formula="formula", Insert=false, Length=1, NotNull=true, Unique=true, Update=false, UniqueKey="uniqueKey", Index="index", SqlType="sqlType", Check="check")]
        public int CustomizedProperty {
            get {
                return this._customizedProperty;
            }
            set {
                this._customizedProperty = value;
            }
        }
        
        [Property(ColumnType="String")]
        [ValidateConfirmation("...")]
        [ValidateCreditCard()]
        [ValidateEmail()]
        [ValidateIsUnique()]
        [ValidateNotEmpty()]
        [ValidateRegExp("...")]
        [ValidateLength(20)]
        public string PropertyWithValidators {
            get {
                return this._propertyWithValidators;
            }
            set {
                this._propertyWithValidators = value;
            }
        }
    }
    
    [ActiveRecord()]
    public partial class ClassWithPK : ActiveRecordBase {
        
        private int _primaryKeyProperty;
        
        [PrimaryKey(PrimaryKeyType.Native, ColumnType="Int32", Params="params", UnsavedValue="unsavedValue")]
        public int PrimaryKeyProperty {
            get {
                return this._primaryKeyProperty;
            }
            set {
                this._primaryKeyProperty = value;
            }
        }
    }
    
    [ActiveRecord()]
    public partial class ClassWithCompositeKey : ActiveRecordBase {
        
        private ClassWithCompositeKeyCompositeKey _classWithCompositeKeyCompositeKey;
        
        [CompositeKey()]
        public ClassWithCompositeKeyCompositeKey ClassWithCompositeKeyCompositeKey {
            get {
                return this._classWithCompositeKeyCompositeKey;
            }
            set {
                this._classWithCompositeKeyCompositeKey = value;
            }
        }
    }
    
    [Serializable()]
    public partial class ClassWithCompositeKeyCompositeKey {
        
        private int _key1;
        
        private int _key2;
        
        [KeyProperty(ColumnType="Int32")]
        public int Key1 {
            get {
                return this._key1;
            }
            set {
                this._key1 = value;
            }
        }
        
        [KeyProperty(ColumnType="Int32")]
        public int Key2 {
            get {
                return this._key2;
            }
            set {
                this._key2 = value;
            }
        }
        
        public override string ToString() {
            return String.Join(":", new string[] {
                        this._key1.ToString(),
                        this._key2.ToString()});
        }
        
        public override bool Equals(object obj) {
            if ((obj == this)) {
                return true;
            }
            if (((obj == null) 
                        || (obj.GetType() != this.GetType()))) {
                return false;
            }
            ClassWithCompositeKeyCompositeKey test = ((ClassWithCompositeKeyCompositeKey)(obj));
            return (((_key1 == test._key1) 
                        || ((_key1 != null) 
                        && _key1.Equals(test._key1))) 
                        && ((_key2 == test._key2) 
                        || ((_key2 != null) 
                        && _key2.Equals(test._key2))));
        }
        
        public override int GetHashCode() {
            return XorHelper(_key1.GetHashCode(), _key2.GetHashCode());
        }
        
        private int XorHelper(int left, int right) {
            return left ^ right;
        }
    }
}
