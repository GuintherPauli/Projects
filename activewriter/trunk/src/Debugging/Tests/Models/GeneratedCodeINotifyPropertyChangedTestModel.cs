//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.312
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Debugging.Tests {
    using System;
    using System.Collections.Generic;
    using System.Collections;
    using Castle.ActiveRecord;
    using System.ComponentModel;
    
    
    [ActiveRecord()]
    public partial class NotifyingClass : ActiveRecordBase<NotifyingClass>, INotifyPropertyChanged {
        
        private string _pKPropertyWithNotify;
        
        private string _propertyWithNotify;
        
        [PrimaryKey(PrimaryKeyType.Native, ColumnType="String")]
        public virtual string PKPropertyWithNotify {
            get {
                return this._pKPropertyWithNotify;
            }
            set {
                if (((_pKPropertyWithNotify == value) 
                            == false)) {
                    this._pKPropertyWithNotify = value;
                    this.NotifyPropertyChanged("PKPropertyWithNotify");
                }
            }
        }
        
        [Property(ColumnType="String")]
        public virtual string PropertyWithNotify {
            get {
                return this._propertyWithNotify;
            }
            set {
                if (((_propertyWithNotify == value) 
                            == false)) {
                    this._propertyWithNotify = value;
                    this.NotifyPropertyChanged("PropertyWithNotify");
                }
            }
        }
        
        #region INotifyPropertyChanged Members
        public event PropertyChangedEventHandler PropertyChanged;
        
        protected virtual void NotifyPropertyChanged(string information) {
            if ((PropertyChanged != null)) {
                PropertyChanged(this, new PropertyChangedEventArgs(information));
            }
        }
        #endregion
    }
}
