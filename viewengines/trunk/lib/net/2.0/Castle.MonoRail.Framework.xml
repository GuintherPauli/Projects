<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.MonoRail.Framework</name>
    </assembly>
    <members>
        <member name="T:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext">
            <summary>
            Adapter to expose a valid <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/> 
            implementation on top of <c>HttpContext</c>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IRailsEngineContext">
            <summary>
            Represents an abstraction between the MonoRail API
            and the ASP.Net API. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IRailsEngineContext.Transfer(System.String,System.Boolean)">
            <summary>
            Transfer the execution to another resource.
            </summary>
            <param name="path"></param>
            <param name="preserveForm"></param>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.RequestType">
            <summary>
            Gets the request type (GET, POST, etc)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Url">
            <summary>
            Gets the URL.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.UrlReferrer">
            <summary>
            Gets the referring URL.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.UnderlyingContext">
            <summary>
            Gets the underlying context of the API being used.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Params">
            <summary>
            Access the params (Query, Post, headers and Cookies)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Session">
            <summary>
            Access the session objects.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Request">
            <summary>
            Gets the request object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Response">
            <summary>
            Gets the response object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Trace">
            <summary>
            Gets the trace object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Cache">
            <summary>
            Access the Cache associated with this 
            web execution context.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Flash">
            <summary>
            Access a dictionary of volative items.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.CurrentUser">
            <summary>
            Gets or sets the current user.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.LastException">
            <summary>
            Gets the last exception raised during
            the execution of an action.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.ApplicationPath">
            <summary>
            Returns the application path.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.ApplicationPhysicalPath">
            <summary>
            Returns the physical application path.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.UrlInfo">
            <summary>
            Returns the <see cref="P:Castle.MonoRail.Framework.IRailsEngineContext.UrlInfo"/> of the the current request.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Server">
            <summary>
            Returns an <see cref="T:Castle.MonoRail.Framework.IServerUtility"/>.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.ApplicationPhysicalPath">
            <summary>
            Returns the physical application path.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Adapters.RequestAdapter">
            <summary>
            This class adapts the <c>HttpRequest</c> to a MonoRail <c>IRequest</c>.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResponse.CachePolicy">
            <summary>
            Gets the caching policy (expiration time, privacy, 
            vary clauses) of a Web page.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResponse.CacheControlHeader">
            <summary>
            Sets the Cache-Control HTTP header to Public or Private.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResponse.Charset">
            <summary>
            Gets or sets the HTTP character set of the output stream.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.ResponseAdapter.CachePolicy">
            <summary>
            Gets the caching policy (expiration time, privacy, 
            vary clauses) of a Web page.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.ResponseAdapter.CacheControlHeader">
            <summary>
            Sets the Cache-Control HTTP header to Public or Private.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.ResponseAdapter.Charset">
            <summary>
            Gets or sets the HTTP character set of the output stream.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IServerUtility.MapPath(System.String)">
            <summary>
            Returns the physical path for the 
            specified virtual path.
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IServerUtility.HtmlEncode(System.String)">
            <summary>
            HTML encodes a string and returns the encoded string.  
            </summary>
            <param name="content">The text string to HTML encode.</param>
            <returns>The HTML encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IServerUtility.UrlEncode(System.String)">
            <summary>
            URL encodes a string and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IServerUtility.UrlPathEncode(System.String)">
            <summary>
            URL encodes the path portion of a URL string and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IServerUtility.JavaScriptEscape(System.String)">
            <summary>
            Escapes JavaScript with Url encoding and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode and escape JavaScript within.</param>
            <returns>The URL encoded and JavaScript escaped text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IServerUtility.BuildWebParams(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Build an encoded QueryString
            </summary>
            <param name="queryParams">A NameValueCollection with the values for the QueryParams</param>
            <returns>The QueryString encoded.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.HtmlEncode(System.String)">
            <summary>
            HTML encodes a string and returns the encoded string.  
            </summary>
            <param name="content">The text string to HTML encode.</param>
            <returns>The HTML encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.JavaScriptEscape(System.String)">
            <summary>
            Escapes JavaScript with Url encoding and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode and escape JavaScript within.</param>
            <returns>The URL encoded and JavaScript escaped text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.BuildWebParams(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns an encoded string that can be used as part of the url query string or the post body param
            </summary>
            <param name="args">NameValueCollection with the params to be constructed</param>
            <returns>URL safe params name1=value1[&amp;name2=value2&amp;...]</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.UrlEncode(System.String)">
            <summary>
            URL encodes a string and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.UrlPathEncode(System.String)">
            <summary>
            URL encodes the path portion of a URL string and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.MapPath(System.String)">
            <summary>
            Returns the physical path for the 
            specified virtual path.
            </summary>
            <param name="virtualPath"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Verb">
            <summary>
            Enum to identify a http verb 
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Verb.Get">
            <summary>
            The GET method means retrieve whatever information is identified by the Request-URI.
            <remarks>
            The convention has been established that the GET method SHOULD 
            NOT have the significance of taking an action other than retrieval. 
            </remarks>
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Verb.Post">
            <summary>
            The POST method is used to request that the origin server accept the entity 
            enclosed in the request as a new subordinate of the resource identified by the 
            Request-URI in the Request-Line. 
            <remarks>
            The convention has been established that the POST method will
            take an action other than just retrieval. 
            </remarks>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.AccessibleThroughAttribute">
            <summary>
            Decorates an action with a restriction to the HTTP method 
            that is allowed to request it.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.AccessibleThroughAttribute.#ctor(Castle.MonoRail.Framework.Verb)">
            <summary>
            Constructs a AccessibleThroughAttribute with 
            the specified <paramref name="verb"/>.
            </summary>
            <param name="verb">The <see cref="P:Castle.MonoRail.Framework.AccessibleThroughAttribute.Verb"/> to allow for this action.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.AccessibleThroughAttribute.Verb">
            <summary>
            The Verb to allow.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.AjaxActionAttribute">
            <summary>
            Defines that an action is accessible through AJAX calls,
            so <see cref="T:Castle.MonoRail.Framework.Helpers.AjaxHelper"/> can generate a JavaScript proxy for it.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.AjaxActionAttribute.#ctor">
            <summary>
            Method marked with this attribute will be accessible through AJAX calls,
            and <see cref="T:Castle.MonoRail.Framework.Helpers.AjaxHelper"/> will be able to generate a JavaScript proxy for them.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.AjaxActionAttribute.#ctor(System.String)">
            <summary>
            Method marked with this attribute will be accessible through AJAX calls,
            and <see cref="T:Castle.MonoRail.Framework.Helpers.AjaxHelper"/> will be able to generate a JavaScript proxy for them.
            </summary>
            <param name="name">
            A name for the action, on the JavaScript proxy. Useful when dealing with
            overloaded Ajax actions, as JavaScript does not support function overloading.
            </param>
        </member>
        <member name="P:Castle.MonoRail.Framework.AjaxActionAttribute.Name">
            <summary>
            A name for the action, on the JavaScript proxy. Useful when dealing with
            overloaded Ajax actions, as JavaScript does not support function overloading.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ControllerDetailsAttribute">
            <summary>
            Decorates a controller with a different name
            and optionaly an area which the controller belongs.
            This is used to override the convention for controller
            names and to optionally associate a controller with an 
            area name.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerDetailsAttribute.#ctor">
            <summary>
            Constructs a ControllerDetailsAttribute
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerDetailsAttribute.#ctor(System.String)">
            <summary>
            Constructs a ControllerDetailsAttribute
            with a name for the controller.
            </summary>
            <param name="name">The specified Controller Name</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.ControllerDetailsAttribute.Name">
            <summary>
            The controller's name
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ControllerDetailsAttribute.Area">
            <summary>
            The controller's area
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.DataBindAttribute">
            <summary>
            The DataBind Attribute is used to indicate that an Action methods parameter 
            is to be intercepted and handled by the <see cref="T:Castle.Components.Binder.DataBinder"/>.
            </summary>
            <remarks>
            Allowed usage is one per method parameter, and is not inherited.
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.IParameterBinder">
            <summary>
            Implemented by attributes that wants to perform 
            some conversion to populate a smart dispatcher 
            action argument.
            <seealso cref="T:Castle.MonoRail.Framework.FlashBinderAttribute"/>
            <seealso cref="T:Castle.MonoRail.Framework.DataBindAttribute"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.DataBindAttribute.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.DataBindAttribute"/>
            with an associated prefix. The prefix must be present 
            in the form data and is used to avoid name clashes.
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.DataBindAttribute.CalculateParamPoints(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)">
            <summary>
            Implementation of <see cref="M:Castle.MonoRail.Framework.IParameterBinder.CalculateParamPoints(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)"/>
            and it is used to give the method a weight when overloads are available.
            </summary>
            <param name="controller">The controller instance</param>
            <param name="parameterInfo">The parameter info</param>
            <returns>Positive value if the parameter can be bound</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.DataBindAttribute.Bind(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)">
            <summary>
            Implementation of <see cref="M:Castle.MonoRail.Framework.IParameterBinder.Bind(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)"/>
            and it is used to read the data available and construct the
            parameter type accordingly.
            </summary>
            <param name="controller">The controller instance</param>
            <param name="parameterInfo">The parameter info</param>
            <returns>The bound instance</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.DataBindAttribute.Exclude">
            <summary>
            Gets or sets the property names to exclude.
            </summary>
            <value>A comma separated list 
            of property names to exclude from databinding.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.DataBindAttribute.Allow">
            <summary>
            Gets or sets the property names to allow.
            </summary>
            <value>A comma separated list 
            of property names to allow from databinding.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.DataBindAttribute.From">
            <summary>
            Gets or sets <see cref="T:Castle.MonoRail.Framework.ParamStore"/> used to 
            indicate where to get the values from
            </summary>
            <value>The <see cref="T:Castle.MonoRail.Framework.ParamStore"/> type.  
            Typically <see cref="F:Castle.MonoRail.Framework.ParamStore.Params"/>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.DataBindAttribute.Prefix">
            <summary>
            Gets the databinding prefix.
            </summary>
            <remarks>
            The prefix is a name followed by a 
            dot that prefixes the entries names 
            on the source http request.
            </remarks>
            <value>The databinding prefix.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.DefaultActionAttribute">
            <summary>
            Declares that the Controller should enable a DefaultAction method 
            for request processing if no action can be found with the supplied name
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.DefaultActionAttribute.#ctor">
            <summary>
            Constructs a <see cref="T:Castle.MonoRail.Framework.DefaultActionAttribute"/>
            using <c>DefaultAction</c>
            as the default action name
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.DefaultActionAttribute.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Castle.MonoRail.Framework.DefaultActionAttribute"/>
            using the supplied value as the default action name
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.DefaultActionAttribute.DefaultAction">
            <summary>
            Gets the default action name
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.DynamicActionProviderAttribute">
            <summary>
            Associates a provider that can add dynamic actions 
            to a controller
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.DynamicActionProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructs a <see cref="T:Castle.MonoRail.Framework.DynamicActionProviderAttribute"/>
            associating the supplied type as the action provider.
            </summary>
            <param name="providerType"></param>
        </member>
        <member name="P:Castle.MonoRail.Framework.DynamicActionProviderAttribute.ProviderType">
            <summary>
            Gets the provider type
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.FilterAttribute">
            <summary>
            Decorates a controller associating a <see cref="T:Castle.MonoRail.Framework.IFilter"/>
            implementation with it. More than one can be associated.
            </summary>
            <remarks>
            If more than one filter is associate with an action (or controller and 
            action), the order of execution cannot be predicted. In this case
            use <see cref="P:Castle.MonoRail.Framework.FilterAttribute.ExecutionOrder"/> to define the order of execution.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.FilterAttribute.#ctor(Castle.MonoRail.Framework.ExecuteEnum,System.Type)">
            <summary>
            Constructs a FilterAttribute associating 
            the filter type and when the filter should be invoked.
            </summary>
            <param name="when">When to execute the filter</param>
            <param name="filterType">The filter implementation</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.FilterAttribute.BuildFilterDescriptors">
            <summary>
            Implementation of <see cref="T:Castle.MonoRail.Framework.Internal.IFilterDescriptorBuilder"/>.
            Returns the descriptor for this filter association.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.FilterAttribute.FilterType">
            <summary>
            Gets the filter implementation type
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.FilterAttribute.When">
            <summary>
            Gets when to run the filter
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.FilterAttribute.ExecutionOrder">
            <summary>
            Gets or sets the filter execution order. 
            The lower the value, the higher the priority
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.FlashBinderAttribute">
            <summary>
            Another implementation of a parameter binding. This
            one allow the programmer to say that the parameter value comes 
            from an entry in the <see cref="P:Castle.MonoRail.Framework.Controller.Flash"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.FlashBinderAttribute.Bind(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)">
            <summary>
            Implementation of <see cref="M:Castle.MonoRail.Framework.IParameterBinder.Bind(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)"/>
            and it is used to read the data available and construct the
            parameter type accordingly.
            </summary>
            <param name="controller">The controller instance</param>
            <param name="parameterInfo">The parameter info</param>
            <returns>The bound instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.FlashBinderAttribute.CalculateParamPoints(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)">
            <summary>
            Implementation of <see cref="M:Castle.MonoRail.Framework.IParameterBinder.CalculateParamPoints(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)"/>
            and it is used to give the method a weight when overloads are available.
            </summary>
            <param name="controller">The controller instance</param>
            <param name="parameterInfo">The parameter info</param>
            <returns>Positive value if the parameter can be bound</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.FlashBinderAttribute.FlashKey">
            <summary>
            The flash entry to use. If none 
            is provided, the target parameter name is used
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.HelperAttribute">
            <summary>
            Associates a helper class with the controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.HelperAttribute.#ctor(System.Type)">
            <summary>
            Constructs a <see cref="T:Castle.MonoRail.Framework.HelperAttribute"/> 
            with the supplied <c>helperType</c>.
            </summary>
            <param name="helperType">The helper type</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.HelperAttribute.#ctor(System.Type,System.String)">
            <summary>
            Constructs a <see cref="T:Castle.MonoRail.Framework.HelperAttribute"/> 
            with the supplied <c>helperType</c> and a name to be bound to it.
            </summary>
            <param name="helperType">The helper type</param>
            <param name="name">Name bound to the helper. The name will be
            used on the view to gain access to it</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.HelperAttribute.BuildHelperDescriptors">
            <summary>
            <see cref="T:Castle.MonoRail.Framework.Internal.IHelperDescriptorBuilder"/> implementation.
            Gets the <seealso cref="T:Castle.MonoRail.Framework.Internal.HelperDescriptor"/>
            that describes the helper.
            </summary>
            <returns>The descriptor instance</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.HelperAttribute.Name">
            <summary>
            Gets Name bound to the helper. The name will be
            used on the view to gain access to it
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.HelperAttribute.HelperType">
            <summary>
            Gets the helper type
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.LayoutAttribute">
            <summary>
            Associates a layout name with a controller.
            The layout can later be changed using the LayoutName
            property of the <see cref="T:Castle.MonoRail.Framework.Controller"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.LayoutAttribute.#ctor(System.String)">
            <summary>
            Constructs a LayoutAttribute with the 
            layout name.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.LayoutAttribute.BuildLayoutDescriptor">
            <summary>
            <see cref="T:Castle.MonoRail.Framework.Internal.ILayoutDescriptorBuilder"/> implementation.
            Gets the descriptor that describes the layout.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.LayoutAttribute.LayoutName">
            <summary>
            Gets the layout name
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.LocalizationFilterAttribute">
            <summary>
            This is an special filter attribute. It is used
            to define from where MonoRail should read the localization information
            to find out the locale of the client. 
            <para>
            For example, it can use the browser, or a cookie, an entry in the 
            query string (or even in the session)
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.LocalizationFilterAttribute.#ctor">
            <summary>
            Defines that 
            you want to use a cookie named 
            "locale", but if that fails it falls back
            to the client's browser locale.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.LocalizationFilterAttribute.#ctor(Castle.MonoRail.Framework.Filters.RequestStore,System.String)">
            <summary>
            Defines a new LocalizationFilter.
            </summary>
            <param name="store">Location where the localization parameter is stored.</param>
            <param name="key">Name of the parameter in the store.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.LocalizationFilterAttribute.Key">
            <summary>
            Key under which the locale value is stored.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.LocalizationFilterAttribute.Store">
            <summary>
            Location where the locale value is to be stored.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.LocalizationFilterAttribute.FailOnError">
            <summary>
            True if an exception is to be thrown when a specific
            culture appears to be incorrect (can't be created).
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.LocalizationFilterAttribute.UseBrowser">
            <summary>
            Use client browser defined languages as default.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.RescueAttribute">
            <summary>
            Associates a rescue template with a <see cref="T:Castle.MonoRail.Framework.Controller"/> or an action 
            (method). The rescue is invoked in response to some exception during the 
            action processing.
            </summary>
            <remarks>
            The view must exist in the <c>rescues</c> folder in your view folder
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.RescueAttribute.#ctor(System.String)">
            <summary>
            Constructs a RescueAttribute with the template name.
            </summary>
            <param name="viewName">The view to use in the event of error</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.RescueAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructs a RescueAttribute with the template name and exception type.
            </summary>
            <param name="viewName">The view to use in the event of error</param>
            <param name="exceptionType">The exception to match</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.RescueAttribute.BuildRescueDescriptors">
            <summary>
            <see cref="T:Castle.MonoRail.Framework.Internal.IRescueDescriptorBuilder"/> implementation. 
            Builds the rescue descriptors.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.RescueAttribute.ViewName">
            <summary>
            Gets the view name to use
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.RescueAttribute.ExceptionType">
            <summary>
            Gets the exception type
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ResourceAttribute">
            <summary>
            Declares that for the specified class or method, the given resource file should be 
            loaded and set available in the PropertyBag with the specified name.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ResourceAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructs a resource attribute, with the specified name, based
            on the resource in a satellite assembly.
            </summary>
            <param name="name">Name the resource will be available as in the PropertyBag</param>
            <param name="resourceName">Fully qualified name of the resource in the sattelite assembly</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ResourceAttribute.BuildResourceDescriptors">
            <summary>
            <see cref="T:Castle.MonoRail.Framework.Internal.IResourceDescriptorBuilder"/> implementation.
            Builds the resource descriptors.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.ResourceAttribute.Name">
            <summary>
            Gets or sets the Name the of resource that will be available in the PropertyBag.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ResourceAttribute.ResourceName">
            <summary>
            Gets or sets the Fully qualified name of the resource in the sattelite assembly.
            </summary>
            <value>The name of the resource.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ResourceAttribute.CultureName">
            <summary>
            Gets or sets the name of the culture.
            </summary>
            <value>The name of the culture.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ResourceAttribute.AssemblyName">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ResourceAttribute.ResourceType">
            <summary>
            Gets or sets the type of the resource.
            </summary>
            <value>The type of the resource.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.ScaffoldingAttribute">
            <summary>
            Associates scaffolding support with a controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ScaffoldingAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ScaffoldingAttribute"/> class.
            </summary>
            <param name="model">The model/entity that should be implemented</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.ScaffoldingAttribute.Model">
            <summary>
            Gets the model/entity type
            </summary>
            <value>The model/entity type.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.SkipFilterAttribute">
            <summary>
            Declares that for the specific method (action)
            no filter should be applied -- or an specific filter should be
            skipped.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.SkipFilterAttribute.#ctor">
            <summary>
            Constructs a SkipFilterAttribute which skips all filters.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.SkipFilterAttribute.#ctor(System.Type)">
            <summary>
            Constructs a SkipFilterAttribute associating 
            the filter type that should be skipped.
            </summary>
            <param name="filterType">The filter type to be skipped</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.SkipFilterAttribute.FilterType">
            <summary>
            Gets the type of the filter.
            </summary>
            <value>The type of the filter.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.SkipFilterAttribute.BlanketSkip">
            <summary>
            Gets a value indicating whether [blanket skip].
            </summary>
            <value><c>true</c> if [blanket skip]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.SkipRescueAttribute">
            <summary>
            Declares that for the specific 
            method (action) no rescue should be performed.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.ISerializedConfig">
            <summary>
            Used by configurable elements
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.#ctor(System.Xml.XmlNode)">
            <summary>
            Pendent
            </summary>
            <param name="section"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.MonoRailSectionHandler">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.RoutingRule">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.TypeLoadUtil.GetEffectiveTypeName(System.String)">
            <summary>
            Hack to allow MR to work when the main assemblies are on 
            GAC. This method returns the complete name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Controllers.FilesController">
            <summary>
            Buit in <see cref="T:Castle.MonoRail.Framework.Controller"/> containing the files requireds by helpers and other 
            parts of MonoRail.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Controller">
            <summary>
            Implements the core functionality and exposes the
            common methods for concrete controllers.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.viewEngine">
            <summary>
            The reference to the <see cref="T:Castle.MonoRail.Framework.IViewEngine"/> instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.context">
            <summary>
            Holds the request/context information
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.logger">
            <summary>
            Logger instance. Should never be null
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.bag">
            <summary>
            Holds information to pass to the view
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.filters">
            <summary>
            Holds the filters associated with the action
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.filterFactory">
            <summary>
            Reference to the <see cref="T:Castle.MonoRail.Framework.IFilterFactory"/> instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller._areaName">
            <summary>
            The area name which was used to access this controller
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller._controllerName">
            <summary>
            The controller name which was used to access this controller
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller._selectedViewName">
            <summary>
            The view name selected to be rendered after the execution 
            of the action
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller._layoutName">
            <summary>
            The layout name that the view engine should use
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller._evaluatedAction">
            <summary>
            The original action requested
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.helpers">
            <summary>
            The helper instances collected
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.resources">
            <summary>
            The resources associated with this controller
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.resourceFactory">
            <summary>
            Reference to the <see cref="T:Castle.MonoRail.Framework.IResourceFactory"/> instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.#ctor">
            <summary>
            Constructs a Controller
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderView(System.String)">
            <summary>
            Specifies the view to be processed after the action has finished its processing. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderView(System.String,System.Boolean)">
            <summary>
            Specifies the view to be processed after the action has finished its processing. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderView(System.String,System.String)">
            <summary>
            Specifies the view to be processed after the action has finished its processing. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderView(System.String,System.String,System.Boolean)">
            <summary>
            Specifies the view to be processed after the action has finished its processing. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.InPlaceRenderView(System.IO.TextWriter,System.String)">
            <summary>
            Specifies the view to be processed and results are written to System.IO.TextWriter. 
            </summary>
            <param name="output"></param>
            <param name="name">The name of the view to process.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderSharedView(System.String)">
            <summary>
            Specifies the shared view to be processed after the action has finished its
            processing. (A partial view shared 
            by others views and usually in the root folder
            of the view directory).
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderSharedView(System.String,System.Boolean)">
            <summary>
            Specifies the shared view to be processed after the action has finished its
            processing. (A partial view shared 
            by others views and usually in the root folder
            of the view directory).
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.InPlaceRenderSharedView(System.IO.TextWriter,System.String)">
            <summary>
            Specifies the shared view to be processed and results are written to System.IO.TextWriter.
            (A partial view shared by others views and usually in the root folder
            of the view directory).
            </summary>
            <param name="output"></param>
            <param name="name">The name of the view to process.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.CancelView">
            <summary>
            Cancels the view processing.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.CancelLayout">
            <summary>
            Cancels the layout processing.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderText(System.String)">
            <summary>
            Cancels the view processing and writes
            the specified contents to the browser
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderText(System.String,System.Object[])">
            <summary>
            Cancels the view processing and writes
            the specified contents to the browser
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderText(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Cancels the view processing and writes
            the specified contents to the browser
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.DirectRender(System.String)">
            <summary>
            Sends raw contents to be rendered directly by the view engine.
            It's up to the view engine just to apply the layout and nothing else.
            </summary>
            <param name="contents">Contents to be rendered.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.HasTemplate(System.String)">
            <summary>
            Returns true if the specified template exists.
            </summary>
            <param name="templateName"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RedirectToAction(System.String)">
            <summary> 
            Redirects to another action in the same controller.
            </summary>
            <param name="action">The action name</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RedirectToAction(System.String,System.String[])">
            <summary> 
            Redirects to another action in the same controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RedirectToAction(System.String,System.Collections.IDictionary)">
            <summary> 
            Redirects to another action in the same controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RedirectToAction(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary> 
            Redirects to another action in the same controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.TransformActionName(System.String)">
            <summary>
            Gives a chance to subclasses to format the action name properly
            <seealso cref="T:Castle.MonoRail.Framework.WizardStepPage"/>
            </summary>
            <param name="action">Raw action name</param>
            <returns>Properly formatted action name</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String)">
            <summary>
            Redirects to the specified URL. All other Redirects call this one.
            </summary>
            <param name="url">Target URL</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.Collections.IDictionary)">
            <summary>
            Redirects to the specified URL. All other Redirects call this one.
            </summary>
            <param name="url">Target URL</param>
            <param name="parameters">URL parameters</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.String)">
            <summary>
            Redirects to another controller and action.
            </summary>
            <param name="controller">Controller name</param>
            <param name="action">Action name</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.String,System.String)">
            <summary>
            Redirects to another controller and action.
            </summary>
            <param name="area">Area name</param>
            <param name="controller">Controller name</param>
            <param name="action">Action name</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects to another controller and action with the specified paramters.
            </summary>
            <param name="controller">Controller name</param>
            <param name="action">Action name</param>
            <param name="parameters">Key/value pairings</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects to another controller and action with the specified paramters.
            </summary>
            <param name="area">Area name</param>
            <param name="controller">Controller name</param>
            <param name="action">Action name</param>
            <param name="parameters">Key/value pairings</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Redirects to another controller and action with the specified paramters.
            </summary>
            <param name="controller">Controller name</param>
            <param name="action">Action name</param>
            <param name="parameters">Key/value pairings</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Redirects to another controller and action with the specified paramters.
            </summary>
            <param name="area">Area name</param>
            <param name="controller">Controller name</param>
            <param name="action">Action name</param>
            <param name="parameters">Key/value pairings</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Process(Castle.MonoRail.Framework.IRailsEngineContext,System.String,System.String,System.String)">
            <summary>
            Method invoked by the engine to start 
            the controller process. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Send(System.String)">
            <summary>
            Performs the specified action, which means:
            <br/>
            1. Define the default view name<br/>
            2. Run the before filters<br/>
            3. Select the method related to the action name and invoke it<br/>
            4. On error, execute the rescues if available<br/>
            5. Run the after filters<br/>
            6. Invoke the view engine<br/>
            </summary>
            <param name="action">Action name</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Send(System.String,System.Object[])">
            <summary>
            Performs the specified action with arguments.
            </summary>
            <param name="action">Action name</param>
            <param name="actionArgs">Action arguments</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.InternalSend(System.String,System.Object[])">
            <summary>
            Performs the specified action, which means:
            <br/>
            1. Define the default view name<br/>
            2. Run the before filters<br/>
            3. Select the method related to the action name and invoke it<br/>
            4. On error, execute the rescues if available<br/>
            5. Run the after filters<br/>
            6. Invoke the view engine<br/>
            </summary>
            <param name="action">Action name</param>
            <param name="actionArgs">Action arguments</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.FindOutDefaultMethod(System.Object[])">
            <summary>
            The following lines were added to handle _default processing
            if present look for and load _default action method
            <seealso cref="T:Castle.MonoRail.Framework.DefaultActionAttribute"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.ProcessScaffoldIfPresent">
            <summary>
            Invokes the scaffold support if the controller
            is associated with a scaffold
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.SelectMethod(System.String,System.Collections.IDictionary,Castle.MonoRail.Framework.IRequest,System.Object[])">
            <summary>
            Pendent
            </summary>
            <param name="action"></param>
            <param name="actions"></param>
            <param name="request"></param>
            <param name="actionArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.InvokeMethod(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Pendent
            </summary>
            <param name="method"></param>
            <param name="methodArgs"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.InvokeMethod(System.Reflection.MethodInfo,Castle.MonoRail.Framework.IRequest,System.Object[])">
            <summary>
            Pendent
            </summary>
            <param name="method"></param>
            <param name="request"></param>
            <param name="methodArgs"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.CopyFilterDescriptors">
            <summary>
            Clones all Filter descriptors, in order to get a writable copy.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.PreSendView(System.Object)">
            <summary>
            Invoked by the view engine to perform
            any logic before the view is sent to the client.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.PostSendView(System.Object)">
            <summary>
            Invoked by the view engine to perform
            any logic after the view had been sent to the client.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderMailMessage(System.String)">
            <summary>
            Creates an instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/>
            using the specified template for the body
            </summary>
            <param name="templateName">
            Name of the template to load. 
            Will look in Views/mail for that template file.
            </param>
            <returns>An instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.DeliverEmail(Castle.Components.Common.EmailSender.Message)">
            <summary>
            Attempts to deliver the Message using the server specified on the web.config.
            </summary>
            <param name="message">The instance of System.Web.Mail.MailMessage that will be sent</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderEmailAndSend(System.String)">
            <summary>
            Renders and delivers the e-mail message.
            <seealso cref="M:Castle.MonoRail.Framework.Controller.RenderMailMessage(System.String)"/>
            <seealso cref="M:Castle.MonoRail.Framework.Controller.DeliverEmail(Castle.Components.Common.EmailSender.Message)"/>
            </summary>
            <param name="templateName"></param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.MetaDescriptor">
            <summary>
            This is intended to be used by MonoRail infrastructure.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Name">
            <summary>
            Gets the controller's name.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.AreaName">
            <summary>
            Gets the controller's area name.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.LayoutName">
            <summary>
            Gets or set the layout being used.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Action">
            <summary>
            Gets the name of the action being processed.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Logger">
            <summary>
            Logger for the controller
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.SelectedViewName">
            <summary>
            Gets or sets the view which will be rendered by this action.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.PropertyBag">
            <summary>
            Gets the property bag, which is used
            to pass variables to the view.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Context">
            <summary>
            Gets the context of this web execution.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Session">
            <summary>
            Gets the Session dictionary.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Flash">
            <summary>
            Gets a dictionary of volative items.
            Ideal for showing success and failures messages.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.HttpContext">
            <summary>
            Gets the web context of ASP.NET API.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Request">
            <summary>
            Gets the request object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Response">
            <summary>
            Gets the response object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Params">
            <summary>
            Shortcut to <see cref="P:Castle.MonoRail.Framework.IRequest.Params"/> 
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Form">
            <summary>
            Shortcut to <see cref="P:Castle.MonoRail.Framework.IRequest.Form"/> 
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Query">
            <summary>
            Shortcut to <see cref="P:Castle.MonoRail.Framework.IRequest.QueryString"></see>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.IsClientConnected">
            <summary>
            Shortcut to 
            <see cref="P:Castle.MonoRail.Framework.IResponse.IsClientConnected"/>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.IsPostBack">
            <summary>
            Determines if the current Action resulted from an ASP.NET PostBack.
            As a result, this property is only relavent when using WebForms views.
            It is placed on the base Controller for convenience only to avoid the
            need to extend the Controller or provide additional helper classes.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.CurrentController">
            <summary>
            Returns the current controller instance
            </summary>
            <remarks>
            The <see cref="M:Castle.MonoRail.Framework.Controller.Process(Castle.MonoRail.Framework.IRailsEngineContext,System.String,System.String,System.String)"/> is responsible
            for adding the controller instance.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.AjaxScripts">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.AjaxHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.BehaviourScripts">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.AjaxHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.EffectsFatScripts">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.EffectsFatHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.Effects2">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.Effects2Helper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.ValidateConfig">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.ValidationHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.ValidateCore">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.ValidationHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.ValidateValidators">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.ValidationHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.ValidateLang">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.ValidationHelper"/>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.AbstractExceptionHandler">
            <summary>
            Provides a basic implementation of <see cref="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler">
            <summary>
            Represents a processor of an exception.
            The processor might choose to register the exception
            in some specific way and then delegate the execution
            to the next handler
            <seealso cref="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IConfigurableHandler"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler.Initialize">
            <summary>
            Implementors should perform any required
            initialization
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler.Process(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should perform the action 
            on the exception. Note that the exception 
            is available in <see cref="P:Castle.MonoRail.Framework.IRailsEngineContext.LastException"/>
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler.Next">
            <summary>
            The next exception in the sink 
            or null if none exists.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.EmailHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IConfigurableHandler">
            <summary>
            Extends <see cref="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler"/> providing
            an <see cref="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IConfigurableHandler.Configure(System.Xml.XmlNode)"/> method
            that is invoked by the framework.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IConfigurableHandler.Configure(System.Xml.XmlNode)">
            <summary>
            Implementors should check for known attributes and child nodes
            within the <c>exceptionHandlerNode</c>
            </summary>
            <param name="exceptionHandlerNode">The Xml node 
            that represents this handler on the configuration file</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.ExceptionChainingExtension">
            <summary>
            This extension allow one to perform one or more steps
            in response to an exception threw by an action. 
            <seealso cref="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler"/>
            </summary>
            <remarks>
            To successfully install this extension you must register 
            it on the <c>extensions</c> node and the handlers within the <c>exception</c> node:
            <code>
              &lt;monoRail&gt;
              	&lt;extensions&gt;
              	  &lt;extension type="Castle.MonoRail.Framework.Extensions.ExceptionChaining.ExceptionChainingExtension, Castle.MonoRail.Framework" /&gt;
              	&lt;/extensions&gt;
              	
              	&lt;exception&gt;
              	  &lt;exceptionHandler type="Type name that implements IExceptionHandler" /&gt;
              	  &lt;exceptionHandler type="Type name that implements IExceptionHandler" /&gt;
              	&lt;/exception&gt;
              &lt;/monoRail&gt;
            </code>
            <para>
            Controllers can request IExceptionProcessor through IServiceProvider
            and invoke the handlers to process an exception
            </para>
            <code>
            public void BuyMercedes()
            {
            	try
            	{
            		...
            	}
            	catch(Exception ex)
            	{
            		IExceptionProcessor exProcessor = (IExceptionProcessor) ServiceProvider.GetService(typeof(IExceptionProcessor));
            		exProcessor.ProcessException(ex);
            
            		RenderView("CouldNotBuyMercedes");
            	}
            }
            </code>
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.IMonoRailExtension">
            <summary>
            Contract for extensions that want to hook 
            on MonoRail's events
            </summary>
            <remarks>
            Extensions implementations must be thread safe and stateless.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.IMonoRailExtension.SetExtensionConfigNode(System.Xml.XmlNode)">
            <summary>
            Gives to the extension implementor a chance to read 
            attributes and child nodes of the extension node
            </summary>
            <param name="node">The node that defines the MonoRail extension</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionProcessor">
            <summary>
            Provides an interface to the ExceptionChaingingExtension 
            for manual triggering
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionProcessor.ProcessException(System.Exception)">
            <summary>
            Initiates the ExceptionChainingExtension manualy
            </summary>
            <param name="exception">The exception to process</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension">
            <summary>
            This extension allow one to provide a custom 
            implementation of the session available on <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/>
            </summary>
            <remarks>
            To successfully install this extension you must add the attribute <c>customSession</c>
            to the <c>monoRail</c> configuration node and register the extension on the extensions node.
            <code>
              &lt;monoRail customSession="Type name that implements ICustomSessionFactory"&gt;
              	&lt;extensions&gt;
              	  &lt;extension type="Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension, Castle.MonoRail.Framework" /&gt;
              	&lt;/extensions&gt;
              &lt;/monoRail&gt;
            </code>
            </remarks>
        </member>
        <member name="F:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension.customSession">
            <summary>
            Reference to an instance of <see cref="T:Castle.MonoRail.Framework.Extensions.Session.ICustomSessionFactory"/>
            obtained from the configuration
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension.Init(Castle.MonoRail.Framework.ExtensionManager,Castle.MonoRail.Framework.Configuration.MonoRailConfiguration)">
            <summary>
            Reads the attribute <c>customSession</c> 
            from <see cref="T:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration"/> and
            instantiate it based on the type name provided.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationException">
            If the typename was not provided or the type 
            could not be instantiated/found
            </exception>
            <param name="manager">The Extension Manager</param>
            <param name="configuration">The configuration</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension.OnAdquireSessionState(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Overrides the ISession instance on <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/>.
            </summary>
            <remarks>Note that the session available through IHttpContext is left untouched</remarks>
            <param name="context"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension.OnReleaseSessionState(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Retrives the ISession instance from <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/>.
            and invokes <see cref="M:Castle.MonoRail.Framework.Extensions.Session.ICustomSessionFactory.PersistSession(System.Collections.IDictionary,Castle.MonoRail.Framework.IRailsEngineContext)"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.Session.ICustomSessionFactory">
            <summary>
            Contract used by <see cref="T:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension"/>
            to obtain the session implementation provided by the programmer
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.Session.ICustomSessionFactory.ObtainSession(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Should identify the session using the context (usually a cookie is used
            for that)
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.Session.ICustomSessionFactory.PersistSession(System.Collections.IDictionary,Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Should persist the session state associated with the context (again, a cookie 
            is the standard approach to identify the session)
            </summary>
            <param name="session"></param>
            <param name="context"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.IFilter">
            <summary>
            Dictates the contract for filters. Implementors 
            should use filter to perform any logic before and/or
            after the action invocation.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IFilter.Perform(Castle.MonoRail.Framework.ExecuteEnum,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should perform they filter logic and
            return <c>true</c> if the action should be processed.
            </summary>
            <param name="exec">When this filter is being invoked</param>
            <param name="context">Current context</param>
            <param name="controller">The controller instance</param>
            <returns><c>true</c> if the action 
            should be invoked, otherwise <c>false</c></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Filters.RequestStore">
            <summary>
            Enum to identify where a value is stored.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Filters.RequestStore.Session">
            <summary>
            Value is stored in the Session object.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Filters.RequestStore.Cookie">
            <summary>
            Value is stored in a cookie object.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Filters.RequestStore.QueryString">
            <summary>
            Value is stored in the querystring.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Filters.RequestStore.Form">
            <summary>
            Value is stored in the form collection.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Filters.RequestStore.Params">
            <summary>
            Value is stored in either query string or form collection.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Filters.LocalizationFilter">
            <summary>
            The LocalizationFilter can be used to determine the culture to use
            for resources and UI.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IFilterAttributeAware">
            <summary>
            Dictates a contract that the defining 
            FilterAttribute can be set
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.AbstractHelper">
            <summary>
            Optional base class for helpers. 
            Extend from this class only if your helpers needs
            a reference to the controller which is using it or
            if you need to use one of the protected methods.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IControllerAware">
            <summary>
            Implemented by the view or helpers, if they desire
            to have access to the controller instance.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.AbstractHelper.controller">
            <summary>
            Store's <see cref="P:Castle.MonoRail.Framework.Helpers.AbstractHelper.Controller"/> for the current view.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.SetController(Castle.MonoRail.Framework.Controller)">
            <summary>
            Sets the controller.
            </summary>
            <param name="controller">Current view's <see cref="P:Castle.MonoRail.Framework.Helpers.AbstractHelper.Controller"/>.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.MergeOptions(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Merges <paramref name="userOptions"/> with <paramref name="defaultOptions"/> placing results in
            <paramref name="userOptions"/>.
            </summary>
            <param name="userOptions">The user options.</param>
            <param name="defaultOptions">The default options.</param>
            <remarks>
            All <see cref="P:System.Collections.IDictionary.Values"/> and <see cref="P:System.Collections.IDictionary.Keys"/> in <paramref name="defaultOptions"/>
            are copied to <paramref name="userOptions"/>. Entries with the same <see cref="P:System.Collections.DictionaryEntry.Key"/> in
            <paramref name="defaultOptions"/> and <paramref name="userOptions"/> are skipped.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.GetAttributes(System.Collections.IDictionary)">
            <summary>
            Generates HTML element attributes string from <paramref name="attributes"/>.
            <code>key1="value1" key2</code>
            </summary>
            <param name="attributes">The attributes for the element.</param>
            <returns><see cref="T:System.String"/> to use inside HTML element's tag.</returns>
            <remarks>
            <see cref="F:System.String.Empty"/> is returned if <paramref name="attributes"/> is <c>null</c> or empty.
            <para>
            If for some <see cref="P:System.Collections.DictionaryEntry.Key"/> <see cref="P:System.Collections.DictionaryEntry.Value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/> only attribute name is appended to the string.
            </para>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.BuildQueryString(System.Collections.IDictionary)">
            <summary>
            
            </summary>
            <param name="paramMap"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.ConcatQueryString(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="leftParams"></param>
            <param name="rightParams"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.HtmlEncode(System.String)">
            <summary>
            HTML encodes a string and returns the encoded string.  
            </summary>
            <param name="content">The text string to HTML encode.</param>
            <returns>The HTML encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.UrlEncode(System.String)">
            <summary>
            URL encodes a string and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.UrlPathEncode(System.String)">
            <summary>
            URL encodes the path portion of a URL string and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.JavaScriptEscape(System.String)">
            <summary>
            Escapes JavaScript with Url encoding and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode and escape JavaScript within.</param>
            <returns>The URL encoded and JavaScript escaped text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.ScriptBlock(System.String)">
            <summary>
            Generates script block.
            <code>
            &lt;script&gt;
            scriptContents
            &lt;/script&gt;
            </code>
            </summary>
            <param name="scriptContents">The script contents.</param>
            <returns><paramref name="scriptContents"/> placed inside <b>script</b> tags.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractHelper.Controller">
            <summary>
            Gets the controller.
            </summary>
            <value>The <see cref="P:Castle.MonoRail.Framework.Helpers.AbstractHelper.Controller"/> used with the current view.</value>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.Loading">
            <summary>
            Called when the remote document is being 
            loaded with data by the browser.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.Loaded">
            <summary>
            Called when the browser has finished loading
            the remote document.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.Interactive">
            <summary>
            Called when the user can interact with the 
            remote document, even though it has not 
            finished loading.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.Complete">
            <summary>
            Called when the XMLHttpRequest has completed.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.OnSuccess">
            <summary>
            Called when the request was successfully (Status code &lt; 500)
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.OnFailure">
            <summary>
            Called when the request was not successfully (Status code &gt;= 500)
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.AjaxHelper">
            <summary>
            MonoRail Helper that delivers AJAX capabilities.
            </summary>
            <remarks>
            The following libraries are exposed:
            <list type="table">
            <item><term>Prototype</term>
            <description>Simplify ajax programming, among other goodies 
            See also <a href="http://prototype.conio.net/"/>
            </description></item>
            <item><term>Behaviour</term>
            <description>Uses css selectors to bind javascript code to DOM elements 
            See also <a href="http://bennolan.com/behaviour/"/>
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.AjaxHelper.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.AjaxHelper.controllerFactory">
            <summary>
            Used by <c>GenerateJSProxy</c> overloads.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.AjaxHelper.controllerDescriptorBuilder">
            <summary>
            Used by <c>GenerateJSProxy</c> overloads.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.GetJavascriptFunctions">
            <summary>
            Renders a Javascript library inside a single script tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.GetBehaviourFunctions">
            <summary>
            Renders a script tag refering the Behaviour library code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ReApply">
            <summary>
            Renders a script block invoking <c>Behaviour.apply()</c>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.AddLoadEvent(System.String)">
            <summary>
            Renders a script block invoking <c>Behaviour.addLoadEvent(loadFunctionName);</c>
            </summary>
            <param name="loadFunctionName">The name of the js function to be invoked when the body is loaded</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.StartBehaviourRegister">
            <summary>
            Renders a script block starting the association of events to selector rules
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.Register(System.String,System.String,System.String)"/>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.EndBehaviourRegister"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.Register(System.String,System.String,System.String)">
            <summary>
            Adds a entry to a registration array. Invoking it 
            with <c>#form</c>, <c>onsubmit</c> and <c>validate</c> will produce
            <c>'#form' : function(e){ e.onsubmit = validate; },</c>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.StartBehaviourRegister"/>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.EndBehaviourRegister"/>
            </summary>
            <param name="selector">The css selector rule</param>
            <param name="eventName">The name of the event on the element</param>
            <param name="jsFunctionName">The function to be invoked in response to the event</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.EndBehaviourRegister">
            <summary>
            Renders the end of a script block that associated events to selector rules
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.StartBehaviourRegister"/>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.Register(System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.GenerateJSProxy(System.String)">
            <summary>
            Generates an AJAX JavaScript proxy for the current controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.GenerateJSProxy(System.String,System.String)">
            <summary>
            Generates an AJAX JavaScript proxy for a given controller.
            <para>
            TODO: Better documentation
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.GenerateJSProxy(System.String,System.String,System.String)">
            <summary>
            Generates an AJAX JavaScript proxy for a given controller.
            <para>
            TODO: Better documentation
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.LinkToFunction(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Returns a link that'll trigger a javascript +function+ using the 
            onclick handler and return false after the fact.
            <code>
            &lt;a href="javascript:void(0);" onclick="functionCodeOrName; return false"&gt;innerContent&lt;/a&gt;
            </code>
            </summary>
            <param name="innerContent">Link content</param>
            <param name="functionCodeOrName">Function definition</param>
            <param name="attributes">Attributes to be applied to the html element</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.LinkToFunction(System.String,System.String)">
            <summary>
            Returns a link that'll trigger a javascript +function+ using the 
            onclick handler and return false after the fact.
            </summary>
            <param name="innerContent">Link content</param>
            <param name="functionCodeOrName">Function definition</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ButtonToFunction(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Returns a button that'll trigger a javascript +function+ using the 
            onclick handler and return false after the fact.
            </summary>
            <param name="innerContent">Button legend</param>
            <param name="functionCodeOrName">Function definition</param>
            <param name="attributes">Attributes to be applied to the html element</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ButtonToFunction(System.String,System.String)">
            <summary>
            Returns a button that'll trigger a javascript +function+ using the 
            onclick handler and return false after the fact.
            </summary>
            <param name="innerContent">Button legend</param>
            <param name="functionCodeOrName">Function definition</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ButtonToRemote(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates a button that if clicked will fire an Ajax invocation. 
            </summary>
            <param name="innerContent">Button legend</param>
            <param name="url">The URL of the Ajax action</param>
            <param name="options">The options for the Ajax call</param>
            <returns>The handcrafted input</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ButtonToRemote(System.String,System.String,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Creates a button that if clicked will fire an Ajax invocation. 
            </summary>
            <param name="innerContent">Button legend</param>
            <param name="url">the url</param>
            <param name="options">the options for the ajax invocations</param>
            <param name="htmloptions">Attributes to be applied to the html element</param>
            <returns>The handcrafted input</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.LinkToRemote(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Returns a link to a remote action defined by <tt>options[:url]</tt> 
            (using the url_for format) that's called in the background using 
            XMLHttpRequest. The result of that request can then be inserted into a
            DOM object whose id can be specified with <tt>options[:update]</tt>. 
            Usually, the result would be a partial prepared by the controller with
            either render_partial or render_partial_collection. 
            </summary>
            <param name="name"></param>
            <param name="url"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.BuildFormRemoteTag(System.String,System.Collections.IDictionary)">
            <summary>
            Returns a form tag that will submit using XMLHttpRequest 
            in the background instead of the regular 
            reloading POST arrangement. Even though it's 
            using Javascript to serialize the form elements, the form submission 
            will work just like a regular submission as viewed by the 
            receiving side (all elements available in @params).
            The options for specifying the target with :url and defining 
            callbacks is the same as link_to_remote.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.BuildFormRemoteTag(System.Collections.IDictionary)">
            <summary>
            Returns a form tag that will submit using XMLHttpRequest 
            in the background instead of the regular 
            reloading POST arrangement. Even though it's 
            using Javascript to serialize the form elements, the form submission 
            will work just like a regular submission as viewed by the 
            receiving side (all elements available in @params).
            The options for specifying the target with :url and defining 
            callbacks is the same as link_to_remote.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.String,System.Int32,System.String,System.String,System.String)">
             <summary>
             Observes the field with the DOM ID specified by +field_id+ and makes
             an Ajax when its contents have changed.
             
             Required +options+ are:
             
             <tt>:frequency</tt>:: The frequency (in seconds) at which changes to
                                   this field will be detected.
             <tt>:url</tt>::       +url_for+-style options for the action to call
                                   when the field has changed.
             
             Additional options are:
             <tt>:update</tt>::    Specifies the DOM ID of the element whose 
                                   innerHTML should be updated with the
                                   XMLHttpRequest response text.
             <tt>:with</tt>::      A Javascript expression specifying the
                                   parameters for the XMLHttpRequest. This defaults
                                   to 'value', which in the evaluated context 
                                   refers to the new field value.
            
             Additionally, you may specify any of the options documented in
             LinkToRemote
             </summary>
             <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.String,System.Int32,System.String,System.Collections.IDictionary)">
             <summary>
             Observes the field with the DOM ID specified by +field_id+ and makes
             an Ajax when its contents have changed.
             
             Required +options+ are:
             
             <tt>:frequency</tt>:: The frequency (in seconds) at which changes to
                                   this field will be detected.
             <tt>:url</tt>::       +url_for+-style options for the action to call
                                   when the field has changed.
             
             Additional options are:
             <tt>:update</tt>::    Specifies the DOM ID of the element whose 
                                   innerHTML should be updated with the
                                   XMLHttpRequest response text.
             <tt>:with</tt>::      A Javascript expression specifying the
                                   parameters for the XMLHttpRequest. This defaults
                                   to 'value', which in the evaluated context 
                                   refers to the new field value.
            
             Additionally, you may specify any of the options documented in
             LinkToRemote
             </summary>
             <param name="fieldId"></param>
             <param name="frequency"></param>
             <param name="url"></param>
             <param name="options"></param>
             <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.Collections.IDictionary)">
            <summary>
            Observes the field with the DOM ID specified by <c>field</c> and makes
            an Ajax call when its contents changes.
            <para>
            The following entries must exist in the dictionary:
            </para>
            <list type="bullet">
            <item>
            <term>field</term>
            <description>The DOM field to be observed</description>
            </item>
            <item>
            <term>url</term>
            <description>url to to call when the field has changed</description>
            </item>
            <item>
            <term>frequency</term>
            <description>The frequency (in seconds) at which changes to this field will be detected</description>
            </item>
            </list>
            <para>
            The following are optional entries:
            </para>
            <list type="bullet">
            <item>
            <term>update</term>
            <description>Specifies the DOM ID of the element whose  
            innerHTML should be updated with the 
            XMLHttpRequest response text</description>
            </item>
            <item>
            <term>with</term>
            <description>A Javascript expression specifying the parameters 
            for the XMLHttpRequest. This defaults to 'value', which in the 
            evaluated context  refers to the new field value</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveForm(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Like <see cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.Collections.IDictionary)"/>, but operates on an entire form identified by the
            DOM ID <c>formId</c>. options are the same as <see cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.Collections.IDictionary)"/>, except 
            the default value of the <tt>:with</tt> option evaluates to the
            serialized (request String) value of the form.
            </summary>
            <param name="formId"></param>
            <param name="frequency"></param>
            <param name="idOfElementToBeUpdated"></param>
            <param name="url"></param>
            <param name="with"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveForm(System.String,System.Collections.IDictionary)">
            <summary>
            Like <see cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.Collections.IDictionary)"/>, but operates on an entire form identified by the
            DOM ID <c>formId</c>. options are the same as <see cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.Collections.IDictionary)"/>, except 
            the default value of the <tt>:with</tt> option evaluates to the
            serialized (request String) value of the form.
            </summary>
            <param name="formId"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveForm(System.Collections.IDictionary)">
            <summary>
            Observes all elements within a form with the DOM 
            ID specified by <c>form</c> and makes
            an Ajax call when its contents changes.
            <para>
            The following entries must exist in the dictionary:
            </para>
            <list type="bullet">
            <item>
            <term>form</term>
            <description>The form element id</description>
            </item>
            <item>
            <term>url</term>
            <description>url to to call when the field has changed</description>
            </item>
            <item>
            <term>frequency</term>
            <description>The frequency (in seconds) at which changes to this field will be detected</description>
            </item>
            </list>
            <para>
            The following are optional entries:
            </para>
            <list type="bullet">
            <item>
            <term>update</term>
            <description>Specifies the DOM ID of the element whose  
            innerHTML should be updated with the 
            XMLHttpRequest response text</description>
            </item>
            <item>
            <term>with</term>
            <description>A Javascript expression specifying the parameters 
            for the XMLHttpRequest. This defaults to 'value', which in the 
            evaluated context  refers to the new field value</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.PeriodicallyCallRemote(System.Collections.IDictionary)">
            <summary>
            Periodically invokes the specified url. You can use the options to 
            override the default frequency (defaults to 10 seconds)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.PeriodicallyCallRemote(System.String,System.Collections.IDictionary)">
            <summary>
            Periodically invokes the specified url. You can use the options to 
            override the default frequency (defaults to 10 seconds)
            </summary>
            <param name="url">url to be invoked periodically</param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.InputTextWithAutoCompletion(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Rendes a input field with Google style autocomplete enabled.
            The specified url is used to gather the contents for the auto complete panel, so 
            and your action should return filtered and sorted results.
            <para>
            The following entries must exist in the dictionary:
            </para>
            <list type="bullet">
            <item>
            <term>input</term>
            <description>The text input element id</description>
            </item>
            <item>
            <term>url</term>
            <description>url to to call when the field has changed</description>
            </item>
            </list>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.InputTextWithAutoCompletion(System.String,System.String,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Rendes a input field with Google style autocomplete enabled.
            The specified url is used to gather the contents for the auto complete panel, so 
            and your action should return filtered and sorted results.
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.AutoCompleteInputText(System.String,System.String,System.Collections.IDictionary)"/>
            </summary>
            <param name="inputName">input element id</param>
            <param name="url">url used to gather results</param>
            <param name="tagAttributes">attributes for the input element</param>
            <param name="completionOptions">options for the autocomplete</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.AutoCompleteInputText(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Generates an javascript block enabling 
            auto completion for the specified input text id (<c>elementId</c>). 
            You can specify the element to be updated using the options
            dictionary (<c>key 'update'</c>), if you don't we assume 
            <c>elementId + "autocomplete"</c>.
            </summary>
            <remarks>
            It's assumed that the url invoked returns a unordered list.
            </remarks>
            <param name="elementId">The element id (input type=text)</param>
            <param name="url">The url to be invoked returning results</param>
            <param name="options">Custom options</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.DateFormatHelper">
            <summary>
            Simple helper for date formatting
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DateFormatHelper.AlternativeFriendlyFormatFromNow(System.DateTime)">
            <summary>
            Alternative representation of a difference
            between the specified date and now. If within 24hr
            it returns <c>Today</c>. If within 48hr it returns
            <c>Yesterday</c>. If within 40 days it returns
            <c>x days ago</c> and otherwise it returns
            <c>x months ago</c>
            <para>
            TODO: Think about i18n
            </para>
            </summary>
            <param name="date">The date in the past (should be equal or less than now)</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DateFormatHelper.FriendlyFormatFromNow(System.DateTime)">
            <summary>
            Returns the difference from the 
            specified <c>date</c> the the current date
            in a friendly string like "1 day ago"
            <para>
            TODO: Think about i18n
            </para>
            </summary>
            <param name="date">The date in the past (should be equal or less than now)</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DateFormatHelper.FormatDate(System.DateTime)">
            <summary>
            Formats to short date
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.DictHelper">
            <summary>
            Helper used to create <see cref="T:System.Collections.IDictionary"/> instances
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DictHelper.CreateDict(System.String[])">
            <summary>
            Creates an <see cref="T:System.Collections.IDictionary"/> with entries
            infered from the arguments. 
            <code>
            CreateDict( "style=display: none;", "selected" )
            </code>
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.Effects2Helper">
            <summary>
            Exposes the effect script from Thomas Fuchs 
            (http://script.aculo.us, http://mir.aculo.us)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.GetJavascriptFunctions">
            <summary>
            Renders a Javascript library inside a single script tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.Appear(System.String)">
            <summary>
            Make an element appear. If the element was previously set to display:none;  
            inside the style attribute of the element, the effect will automatically 
            show the element.
            </summary>
            <remarks>
            Microsoft Internet Explorer can only set opacity on elements that have a 
            'layout'. To let an element have a layout, you must set some CSS 
            positional properties, like 'width' or 'height'.
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.Fade(System.String)">
            <summary>
            Makes an element fade away and takes it out of the document flow 
            at the end of the effect by setting the CSS display property to false.
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI).
            Microsoft Internet Explorer can only set opacity on elements that 
            have a 'layout'. To let an element have a layout, you must set some 
            CSS positional properties, like 'width' or 'height'.
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.Puff(System.String)">
            <summary>
            Gives the illusion of the element puffing away (like a in a cloud of smoke).
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI).
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.DropOut(System.String)">
            <summary>
             Makes the element drop and fade out at the same time.
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI).
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.Shake(System.String)">
            <summary>
            Moves the element slightly to the left, then to the right, repeatedly.
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI).
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.SwitchOff(System.String)">
            <summary>
            Gives the illusion of a TV-style switch off.
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI).
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.BlindUp(System.String)">
            <summary>
            This pair of effects simulates a window blind, where the 
            contents of the affected elements stay in place.
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI), 
            except table rows, table bodies and table heads.
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.BlindDown(System.String)">
            <summary>
            This pair of effects simulates a window blind, where the 
            contents of the affected elements stay in place.
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI), 
            except table rows, table bodies and table heads.
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.SlideUp(System.String)">
            <summary>
            This pair of effects simulates a window blind, where the contents of 
            the affected elements scroll up and down accordingly.
            </summary>
            <remarks>
             You must include a second DIV element, 
             wrapping the contents of the outer DIV. 
             So, if you call new Effect.SlideDown('x'), your element must look like this:
            <code>
             &lt;div id="x"&gt;&lt;div&gt;contents&lt;/div&gt;&lt;/div&gt;
            </code>
            Because of a bug in Internet Explorer 6 (overflow not correctly hidden), 
            an additional wrapper div is needed if you want to use these effects on 
            absolutely positionend elements (wrapper is the absolutely positioned element, 
            x has position:relative; set; ):
            <code>
            &lt;div id="wrapper"&gt;
             &lt;div id="x"&gt;&lt;div&gt;contents&lt;/div&gt;&lt;/div&gt;
            &lt;/div&gt;
            </code>
            Works only on block elements. 
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.SlideDown(System.String)">
            <summary>
            This pair of effects simulates a window blind, where the contents of 
            the affected elements scroll up and down accordingly.
            </summary>
            <remarks>
             You must include a second DIV element, 
             wrapping the contents of the outer DIV. 
             So, if you call new Effect.SlideDown('x'), your element must look like this:
            <code>
             &lt;div id="x"&gt;&lt;div&gt;contents&lt;/div&gt;&lt;/div&gt;
            </code>
            Because of a bug in Internet Explorer 6 (overflow not correctly hidden), 
            an additional wrapper div is needed if you want to use these effects on 
            absolutely positionend elements (wrapper is the absolutely positioned element, 
            x has position:relative; set; ):
            <code>
            &lt;div id="wrapper"&gt;
             &lt;div id="x"&gt;&lt;div&gt;contents&lt;/div&gt;&lt;/div&gt;
            &lt;/div&gt;
            </code>
            Works only on block elements. 
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.EffectsFatHelper">
            <summary>
            Just apply the CSS class "fade" to any element and it will fade from yellow
            to its background color or white if none is specified.
            
            Key Features
            * Fade an infinite number of elements.
            * No inline JavaScript. Simply give an element a class of "fade", the script does the rest "automagically".
            * Background color aware. FAT will do better than simply fade to white if the element (or it's parents) have a CSS background color, it will fade to that background color instead.
            * Fade from any color. For example, if you wanted a list of error messages to fade out from red you would simply give the list a class of "fade-FF0000".
            * Super smooth fading. By default, elements will fade at 30 frames per second (the same rate as a television) over 3 seconds. You can adjust this to any framerate and any duration. You could easily fade elements at 60 frames per second over 4, 5, 10 seconds!
            </summary>
            <remarks>
            NOTE: All elements to be faded must have an id tag!
            BASIC USE: <p id="paragraph1" class="fade">Watch me fade</p>
            ADVANCED USE: Change the default fade from color:
            <p id="paragraph1" class="fade-0066FF">Watch me fade from Blue (#0066FF)</p>
            SEE MORE HERE: http://www.axentric.com/posts/default/7
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.EffectsFatHelper.GetJavascriptFunctions">
            <summary>
            Renders a Javascript library inside a single script tag.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.FormHelper">
            <summary>
            Currently being evaluated
            </summary>
            <remarks>TODO: Make sure it generates XHTML compliant content</remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxField(System.String,System.Collections.IDictionary)">
            <summary>
            Document the entries trueValue and falseValue
            </summary>
            <param name="target"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.Select(System.String,System.Object,System.Collections.IEnumerable,System.Collections.IDictionary)">
            <summary>
            Creates a <c>select</c> elements and its <c>option</c>s. If the <c>dataSource</c>
            elements are complex objects, use the params <c>value</c> and <c>text</c> to make
            the helper use the specified properties to extract the <c>option</c> value and text.
            <para>
            You can also specify the attribute <c>firstoption</c> to force the first option be
            something like 'please select'
            </para>
            </summary>
            <param name="target"></param>
            <param name="selectedValue"></param>
            <param name="dataSource"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.IsPresent(System.Object,System.Object,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Determines whether the present value matches the value on 
            the initialSetValue (which can be a single value or a set)
            </summary>
            <param name="value">Value from the datasource</param>
            <param name="initialSetValue">Value from the initial selection set</param>
            <param name="propertyOnInitialSet">Optional. Property to obtain the value from</param>
            <param name="isMultiple"><c>true</c> if the initial selection is a set</param>
            <returns><c>true</c> if it's selected</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.GetMethod(System.Object,System.String)">
            <summary>
            Gets the property get method.
            </summary>
            <param name="elem">Object specifying the type for which to get the method.</param>
            <param name="property">Property name.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> to be used to retrieve the property value.
            If <paramref name="property"/> is <c>null</c> <c>null</c> is returned.</returns>
            <remarks>This method is used to get the <see cref="T:System.Reflection.MethodInfo"/> to retrieve
            specified property from the specified type.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown is <paramref name="elem"/> is <c>null</c>.</exception>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.HtmlHelper">
            <summary>
            Provides usefull common methods to generate HTML tags.
            </summary>
            <remarks>This helper provides the means to generate commonly used HTML tags. 
            All of it's methods return <see cref="T:System.String"/> that holds resulting HTML.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FieldSet(System.String)">
            <summary>
            Creates a <b>fieldset</b> tag with a legend.
            <code>
            &lt;fieldset&gt;&lt;legend&gt;legendArg&lt;/legend&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndFieldSet"/>
            </summary>
            <param name="legend">Legend to use within the fieldset.</param>
            <returns>HTML string opening a fieldset tag, followed by a legend tag.</returns>
            <remarks>Calling <c>FieldSet( "legendArg" )</c> results in:
            <code>&lt;fieldset&gt;&lt;legend&gt;legendArg&lt;/legend&gt;</code>
            </remarks>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FieldSet(System.String)"/> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndFieldSet"/>:
            <code>
            $HtmlHelper.FieldSet( "legendArg" )
            ...
            $HtmlHelper.EndFieldSet()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndFieldSet">
            <summary>
            Creates a closing <b>fieldset</b> tag.
            <code>
            &lt;/fieldset&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FieldSet(System.String)"/>
            </summary>
            <returns>HTML string closing the fieldset.</returns>
            <remarks>This method should be invoked after <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FieldSet(System.String)"/> to close the fieldset.
            Calling <c>EndFieldSet()</c> results in:
            <code>&lt;/fieldset&gt;</code>
            </remarks>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FieldSet(System.String)"/> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndFieldSet"/>:
            <code>
            $HtmlHelper.FieldSet( "legendArg" )
            ...
            $HtmlHelper.EndFieldSet()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String)">
            <overloads>This method has three overloads.</overloads>
             <summary>
             Creates a <b>form</b> tag with "<b>post</b>" method and specified <paramref name="action"/>.
             <code>
             &lt;form method="post" action="actionArg"&gt;
             </code>
             <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>
             </summary>
             <param name="action">Target action for the form.</param>
             <returns>HTML string with form opening tag.</returns>
             <remarks>Calling <c>Form( "actionArg" )</c> results in:
             <code>&lt;form method="post" action="actionArg"&gt;</code>
             </remarks>
             <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String)"/> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>:
             <code>
             $HtmlHelper.Form( "actionArg" )
             ...
             $HtmlHelper.EndForm()
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String,System.String,System.String)">
            <summary>
            Creates a <b>form</b> tag with specified <paramref name="method"/>, <paramref name="action"/> and
            <paramref name="id"/>.
            <code>
            &lt;form method="methodArg" action="actionArg" id="idArg"&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>
            </summary>
            <param name="action">Target action for the form.</param>
            <param name="id">Form HTML ID.</param>
            <param name="method">Form method (get, post, etc).</param>
            <returns>HTML string with form opening tag.</returns>
            <remarks>Calling <c>Form( "actionArg", "idArg", "methodArg" )</c> results in:
            <code>&lt;form method="methodArg" action="actionArg" id="idArg"&gt;</code>
            </remarks>
            <example>This example shows how to use <b>Form</b> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>:
            <code>
            $HtmlHelper.Form( "actionArg", "idArg", "methodArg" )
            ...
            $HtmlHelper.EndForm()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <b>form</b> tag with specified <paramref name="method"/>, <paramref name="action"/>,
            <paramref name="id"/> and <paramref name="onSubmit"/> event handler. 
            <code>
            &lt;form method="methodArg" action="actionArg" id="idArg" onsubmit="onSubmitArg"&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>
            </summary>
            <param name="action">Target action for the form.</param>
            <param name="id">Form HTML ID.</param>
            <param name="method">Form method (get, post, etc).</param>
            <param name="onSubmit">JavaScript inline code to be invoked upon form submission.</param>
            <returns>HTML string with form opening tag.</returns>
            <remarks>Calling <c>Form( "actionArg", "idArg", "methodArg", "onSubmitArg" )</c> results in:
            <code>&lt;form method="methodArg" action="actionArg" id="idArg" onsubmit="onSubmitArg"&gt;</code>
            </remarks>
            <example>This example shows how to use <b>Form</b> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>:
            <code>
            $HtmlHelper.Form( "actionArg", "idArg", "methodArg", "submitHandler()" )
            ...
            $HtmlHelper.EndForm()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String,System.Collections.IDictionary)">
            <summary>
            Creates a <b>form</b> tag the specified <paramref name="action"/>.
            <code>
            &lt;form action="actionArg"&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>
            </summary>
            <param name="action">Target action for the form.</param>
            <param name="attributes">Html Attributes for the form tag</param>
            <returns>HTML string with form opening tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm">
            <summary>
            Creates a closing <b>form</b> tag.
            <code>
            &lt;/form&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String)"/>
            </summary>
            <returns>HTML string with form closing tag.</returns>
            <remarks>
            Calling <c>EndForm()</c> results in:
            <code>&lt;/form&gt;</code>
            </remarks>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String,System.String,System.String,System.String)"/> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>:
            <code>
            $HtmlHelper.Form( "actionArg", "idArg", "methodArg", "submitHandler()" )
            ...
            $HtmlHelper.EndForm()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Link(System.String,System.String)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates an anchor (link) to the <paramref name="target"/> 
             <code>
             &lt;a href=&quot;/sometarget.html&quot;&gt;linkText&lt;/a&gt;
             </code>
             </summary>
             <param name="target">link's target.</param>
             <param name="linkText">Text of the link.</param>
             <returns>HTML string with anchor to the specified <paramref name="target"/>.</returns>
             <remarks>Calling <c>Link( "something.html", "to something" )</c> results in:
             <code>&lt;a href=&quot;something.html&quot;&gt;something&lt;/a&gt;</code>
             </remarks>
             <example>This example shows how to use <b>Link</b>:
             <code>
             $HtmlHelper.Link( "mypage.html", "This is a link to my page" )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Link(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates an anchor (link) to the <paramref name="target"/> 
            <code>
            &lt;a href=&quot;/sometarget.html&quot;&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <param name="target">link's target.</param>
            <param name="linkText">Text of the link.</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns>HTML string with anchor to the specified <paramref name="target"/>.</returns>
            <remarks>Calling <c>Link( "something.html", "to something", $DictHelper.CreateDict("class=mylinkclass") )</c> results in:
            <code>&lt;a href=&quot;something.html&quot; class=&quot;mylinkclass&quot;&gt;something&lt;/a&gt;</code>
            </remarks>
            <example>This example shows how to use <b>Link</b>:
            <code>
            $HtmlHelper.Link( "mypage.html", "This is a link to my page", $DictHelper.CreateDict("class=mylinkclass") )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkTo(System.String,System.String)">
            <overloads>This method has three overloads.</overloads>
             <summary>
             Creates an anchor (link) to the <paramref name="action"/> on the current controller.
             <code>
             &lt;a href=&quot;/website/currentController/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;
             </code>
             </summary>
             <param name="name">Name for the link.</param>
             <param name="action">Action to link to.</param>
             <returns>HTML string with anchor to the specified <paramref name="action"/>.</returns>
             <remarks>Calling <c>LinkTo( "nameArg", "actionArg" )</c> results in:
             <code>&lt;a href=&quot;/websiter/currentController/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;</code>
             </remarks>
             <example>This example shows how to use <b>LinkTo</b>:
             <code>
             $HtmlHelper.LinkTo( "linkName", "requiredAction" )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkTo(System.String,System.String,System.String)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the specified <paramref name="controller"/>.
            <code>
            &lt;a href=&quot;/website/controllerArg/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;
            </code>
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <returns>HTML string with anchor to the specified <paramref name="controller"/>
            and <paramref name="action"/>.</returns>
            <remarks>Calling <c>LinkTo( "nameArg", "controllerArg", "actionArg" )</c> results in:
            <code>&lt;a href=&quot;/website/controllerArg/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;</code>
            </remarks>
            <example>This example shows how to use <b>LinkTo</b>:
            <code>
            $HtmlHelper.LinkTo( "linkName", "someController", "requiredAction" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkTo(System.String,System.String,System.String,System.Object)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the specified <paramref name="controller"/>
            passing provided <paramref name="id"/>.
            <code>
            &lt;a href="/website/controllerArg/actionArg.rails?id=objectId"&gt;nameArg&lt;/a&gt;
            </code>
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <param name="id">Object to use for the action ID argument.</param>
            <returns>HTML string with anchor to the specified <paramref name="controller"/>, 
            <paramref name="action"/> and <paramref name="id"/>.</returns>
            <remarks>Calling <c>LinkTo( "nameArg", "controllerArg", "actionArg", object )</c> results in:
            <code>&lt;a href="/website/controllerArg/actionArg.rails?id=object"&gt;nameArg&lt;/a&gt;</code>
            <para>
            <see cref="M:System.String.Format(System.String,System.Object)"/> is used to convert <paramref name="id"/> to the actual <see cref="T:System.String"/>.</para>
            </remarks>
            <example>This example shows how to use <b>LinkTo</b>:
            <code>
            $HtmlHelper.LinkTo( "linkName", "someController", "requiredAction", objectToRefByID )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToAttributed(System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the specified <paramref name="controller"/>
            <code>
            &lt;a href=&quot;/website/controllerArg/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;
            </code>
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns>HTML string with anchor to the specified <paramref name="controller"/></returns>
            <remarks>Calling <c>LinkToAttributed( "nameArg", "controllerArg", "actionArg", IDictionary )</c> results in:
            <code>&lt;a href=&quot;/website/controllerArg/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;</code>
            </remarks>
            <example>This example shows how to use <b>LinkToAttributed</b>:
            <code>
            $HtmlHelper.LinkToAttributed( "linkName", "someController", "requiredAction", $DictHelper.CreateDict("class=something") )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToAttributed(System.String,System.String,System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the specified <paramref name="controller"/>
            <code>
            &lt;a href=&quot;/website/controllerArg/actionArg.rails?id=x&quot;&gt;nameArg&lt;/a&gt;
            </code>
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <param name="id">The ID to be passed as a parameter for the action</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns>HTML string with anchor to the specified <paramref name="controller"/></returns>
            <remarks>Calling <c>LinkToAttributed( "nameArg", "controllerArg", "actionArg", IDictionary )</c> results in:
            <code>&lt;a href=&quot;/website/controllerArg/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;</code>
            </remarks>
            <example>This example shows how to use <b>LinkToAttributed</b>:
            <code>
            $HtmlHelper.LinkToAttributed( "linkName", "someController", "requiredAction", $DictHelper.CreateDict("class=something") )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.MapToVirtual(System.String)">
            <summary>
            Maps <paramref name="target"/> to website virtual path.
            <code>/website/targetArg</code>
            </summary>
            <param name="target">Target path to map.</param>
            <returns>URL string pointing to the <paramref name="target"/> in the context of the website.</returns>
            <remarks>Calling <c>MapToVirtual( "targetArg" )</c> results in:
            <code>/website/targetArg</code>
            </remarks>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.MapToVirtual(System.String)"/>:
            <code>
            $HtmlHelper.MapToVirtual( "targetFolder/targetFile.html" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LabelFor(System.String,System.String)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates a label for the element indicated with
             <paramref name="forId"/>.
             <code>
             &lt;label  for="forIdArg"&gt;labelArg&lt;/label&gt;
             </code>
             </summary>
             <param name="forId">ID of the element for which to create the lable.</param>
             <param name="label">Label name.</param>
             <returns>HTML string with generated label.</returns>
             <remarks>Calling <c>LabelFor( "forIdArg", "labelArg" )</c> results in:
             <code>&lt;label  for="forIdArg"&gt;labelArg&lt;/label&gt;</code>
             </remarks>
             <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LabelFor(System.String,System.String)"/>:
             <code>
             $HtmlHelper.LabelFor( "forIdArg", "labelArg" )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LabelFor(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates a label for the element indicated with
            <paramref name="forId"/>.
            <code>
            &lt;label key1="value1" key2="value2"  for="forIdArg"&gt;labelArg&lt;/label&gt;
            </code>
            </summary>
            <param name="forId">ID of the element for which to create the label.</param>
            <param name="label">Label name.</param>
            <param name="attributes">Additional attributes to add to the label.</param>
            <returns>HTML string with generated label.</returns>
            <remarks>Calling <c>LabelFor( "forIdArg", "labelArg", IDictionary )</c> results in:
            <code>&lt;label key5="value5" key4="value4" key1="value1" key3="value3" key2="value2"  for="forIdArg"&gt;labelArg&lt;/label&gt;</code>
            </remarks>
            <para>
            <paramref name="attributes"/> is used to generate additional attributes for the <b>label</b> tag.
            <see cref="P:System.Collections.IDictionary.Keys"/> are used to name attributes.
            <see cref="P:System.Collections.IDictionary.Values"/> are used to assign those attributes values.
            </para>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LabelFor(System.String,System.String,System.Collections.IDictionary)"/>:
            <code>
            $HtmlHelper.LabelFor( "forIdArg", "labelArg", IDictionary )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.DateTime(System.String,System.DateTime)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates three <b>select</b> tags to input day, month and year.
             <code>
             &lt;select name="nameArgday" id="nameArgday" &gt; ... &lt;/select&gt;
             &lt;select name="nameArgmonth" id="nameArgmonth" &gt; ... &lt;/select&gt;
             &lt;select name="nameArgyear" id="nameArgyear" &gt; ... &lt;/select&gt;
             </code>
             </summary>
             <param name="name">Name to use with <b>name</b> and <b>id</b> arguments of the <b>select</b> tag.</param>
             <param name="value"><see cref="T:System.DateTime"/> to use for default selected date.</param>
             <returns>A long HTML string with three <b>select</b> tag input date.</returns>
             <remarks>Calling <c>DateTime( "nameArg", new DateTime( 2005, 07, 15 ) )</c> results in:
             <code>
             &lt;select name="nameArgday" id="nameArgday" &gt;	&lt;option&gt;1&lt;/option&gt;
             	&lt;option&gt;2&lt;/option&gt;
             	...
             	&lt;option&gt;14&lt;/option&gt;
            		&lt;option selected&gt;15&lt;/option&gt;
            		&lt;option&gt;16&lt;/option&gt;
            		...
            		&lt;option&gt;30&lt;/option&gt;
            		&lt;option&gt;31&lt;/option&gt;
            	 &lt;/select&gt; &lt;select name="nameArgmonth" id="nameArgmonth" &gt;	&lt;option&gt;1&lt;/option&gt;
            		&lt;option&gt;2&lt;/option&gt;
            		...
            		&lt;option&gt;6&lt;/option&gt;
            		&lt;option selected&gt;7&lt;/option&gt;
            		&lt;option&gt;8&lt;/option&gt;
            		...
            		&lt;option&gt;11&lt;/option&gt;
            		&lt;option&gt;12&lt;/option&gt;
            	 &lt;/select&gt; &lt;select name="nameArgyear" id="nameArgyear" &gt;	&lt;option&gt;1930&lt;/option&gt;
            		&lt;option&gt;1931&lt;/option&gt;
            		...
            		&lt;option&gt;2004&lt;/option&gt;
            		&lt;option selected&gt;2005&lt;/option&gt;
            		&lt;option&gt;2006&lt;/option&gt;
            		...
            		&lt;option&gt;2029&lt;/option&gt;
             &lt;/select&gt;</code>
             As above example shows the year range is hardcoded between 1930 and 2029.
             <para>
             <paramref name="name"/> is used to generate <b>name</b> and <b>id</b> for each <b>select</b> tag.
             Supplied <see cref="T:System.String"/> is concatenated with "day", "month", or "year" to create
             <see cref="T:System.String"/> for the tag attributes.
             </para>
             </remarks>
             <example>This example shows how to use <b>DateTime</b>:
             <code>
             $HtmlHelper.DateTime( "nameArg", new DateTime( 2005, 07, 15 ) )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.DateTime(System.String,System.DateTime,System.Collections.IDictionary)">
            <summary>
            Creates three <b>select</b> tags to input day, month and year.
            <code>
            &lt;select name="nameArgday" id="nameArgday" key1="value1" key3="value3" key2="value2" &gt; ... &lt;/select&gt;
            &lt;select name="nameArgmonth" id="nameArgmonth" key1="value1" key3="value3" key2="value2" &gt; ... &lt;/select&gt;
            &lt;select name="nameArgyear" id="nameArgyear" key1="value1" key3="value3" key2="value2" &gt; ... &lt;/select&gt;
            </code>
            </summary>
            <param name="name">Name to use with <b>name</b> and <b>id</b> arguments of the <b>select</b> tag.</param>
            <param name="value"><see cref="T:System.DateTime"/> to use for default selected date.</param>
            <param name="attributes">Additional attributes for <b>select</b> tags.</param>
            <returns>A long HTML string with three <b>select</b> tag input date.</returns>
            <remarks>Calling <c>DateTime( "nameArg", new DateTime( 2005, 07, 15 ), IDictionary )</c> results in:
            <code>
            &lt;select name="nameArgday" id="nameArgday" key1="value1" key2="value2" &gt;	&lt;option&gt;1&lt;/option&gt;
            	&lt;option&gt;2&lt;/option&gt;
            	...
            	&lt;option&gt;14&lt;/option&gt;
            	&lt;option selected&gt;15&lt;/option&gt;
            	&lt;option&gt;16&lt;/option&gt;
            	...
            	&lt;option&gt;30&lt;/option&gt;
            	&lt;option&gt;31&lt;/option&gt;
             &lt;/select&gt; &lt;select name="nameArgmonth" id="nameArgmonth" key1="value1" key2="value2" &gt;	&lt;option&gt;1&lt;/option&gt;
            	&lt;option&gt;2&lt;/option&gt;
            	...
            	&lt;option&gt;6&lt;/option&gt;
            	&lt;option selected&gt;7&lt;/option&gt;
            	&lt;option&gt;8&lt;/option&gt;
            	...
            	&lt;option&gt;11&lt;/option&gt;
            	&lt;option&gt;12&lt;/option&gt;
             &lt;/select&gt; &lt;select name="nameArgyear" id="nameArgyear" key1="value1" key2="value2" &gt;	&lt;option&gt;1930&lt;/option&gt;
            	&lt;option&gt;1931&lt;/option&gt;
            	...
            	&lt;option&gt;2004&lt;/option&gt;
            	&lt;option selected&gt;2005&lt;/option&gt;
            	&lt;option&gt;2006&lt;/option&gt;
            	...
            	&lt;option&gt;2029&lt;/option&gt;
            &lt;/select&gt;</code>
            As above example shows the year range is hardcoded between 1930 and 2029.
            <para>
            <paramref name="name"/> is used to generate <b>name</b> and <b>id</b> for each <b>select</b> tag.
            Supplied <see cref="T:System.String"/> is concatenated with "day", "month", or "year" to create
            <see cref="T:System.String"/> for the tag attributes.
            </para>
            <para>
            <paramref name="attributes"/> is used to generate additional attributes for each of the <b>select</b> tags.
            <see cref="P:System.Collections.IDictionary.Keys"/> are used to name attributes.
            <see cref="P:System.Collections.IDictionary.Values"/> are used to assign those attributes values.
            </para>
            </remarks>
            <example>This example shows how to use <b>DateTime</b>:
            <code>
            $HtmlHelper.DateTime( "nameArg", new DateTime( 2005, 07, 15 ), IDictionary )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.TextArea(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a text area element.
            <code>&lt;textarea id="nameArg" name="nameArg" cols="10" rows="10"&gt;valueArg&lt;/textarea&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="cols"><b>cols</b> attribute value.</param>
            <param name="rows"><b>rows</b> attribute value.</param>
            <param name="value">Text to place inside of the text area.</param>
            <returns>HTML string with closed <b>textarea</b> tag.</returns>
            <remarks>Calling <c>TextArea( "nameArg", 10, 10, "valueArg" )</c> results in:
            <code>&lt;textarea id="nameArg" name="nameArg" cols="10" rows="10"&gt;valueArg&lt;/textarea&gt;</code>
            </remarks>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.TextArea(System.String,System.Int32,System.Int32,System.String)"/>:
            <code>
            $HtmlHelper.TextArea( "nameArg", 10, 20, "Text inside text area." )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputButton(System.String)">
            <overloads>This method has three overloads.</overloads>
            <summary>
            Creates an input element of the button type.
            <code>&lt;input type="button" value="valueArg" /&gt;</code>
            </summary>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with button type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputButton( "valueArg" )</c> results in:
            <code>&lt;input type="button" name="valueArg" value="valueArg" /&gt;</code>
            </remarks>
            <example>This example shows how to use <b>InputButton</b>:
            <code>
            $HtmlHelper.InputButton( "valueArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputButton(System.String,System.String)">
            <summary>
            Creates an input element of the button type.
            <code>&lt;input type="button" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with button type <b>input</b> tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputButton(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates an input element of the button type.
            <code>&lt;input type="button" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="attributes">Additional attributes for the <b>input</b> tag.</param>
            <returns>HTML string with button type <b>input</b> tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputCheckbox(System.String,System.Object)">
            <overloads>This method has three overloads.</overloads>
            <summary>
            Creates an input element of the checkbox type.
            <code>&lt;input type="checkbox"name="nameArg"id="nameArg"value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with checkbox type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputCheckbox( "name", "1" )</c> results in:
            <code>&lt;input type="checkbox" name="name" id="name" value="1" /&gt;</code>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputCheckbox(System.String,System.Object,System.Boolean)">
            <summary>
            Creates an input element of the checkbox type.
            <code>&lt;input type="checkbox"name="nameArg"id="nameArg"value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="isChecked">If true, adds the <c>checked</c> attributed to the tag</param>
            <returns>HTML string with checkbox type <b>input</b> tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputCheckbox(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates an input element of the checkbox type.
            <code>&lt;input type="checkbox"name="nameArg"id="nameArg"value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="attributes">Additional attributes for the <b>input</b> tag.</param>
            <returns>HTML string with checkbox type <b>input</b> tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputRadio(System.String,System.Object)">
            <overloads>This method has two overloads.</overloads>
            <summary>
            Creates an input element of the radio type.
            <code>&lt;input type="radio"name="nameArg"value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> attribute.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with radio type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputRadio( "name", "1" )</c> results in:
            <code>&lt;input type="radio" name="name" value="1" /&gt;</code>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputRadio(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates an input element of the radio type.
            <code>&lt;input type="radio"name="nameArg"value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> attribute.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="attributes">Additional attributes for the <b>input</b> tag.</param>
            <returns>HTML string with radio type <b>input</b> tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputFile(System.String)">
            <overloads>This method has two overloads.</overloads>
            <summary>
            Creates an input element of the file type.
            <code>&lt;input type=&quot;file&quot; name=&quot;nameArg&quot;/&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> attribute.</param>
            <returns>HTML string with file type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputFile( "name" )</c> results in:
            <code>&lt;input type=&quot;file&quot; name=&quot;name&quot; /&gt;</code>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputFile(System.String,System.Collections.IDictionary)">
            <summary>
            Creates an input element of the file type.
            <code>&lt;input type=&quot;file&quot; name=&quot;nameArg&quot;/&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> attribute.</param>
            <param name="attributes">Additional attributes for the <b>input</b> tag.</param>
            <returns>HTML string with file type <b>input</b> tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputText(System.String,System.String)">
            <overloads>This method has four overloads.</overloads>
            <summary>
            Creates an input element of the text type.
            <code>&lt;input type="text" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with text type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputText( "nameArg", "valueArg" )</c> results in:
            <code>&lt;input type="text" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </remarks>
            <example>This example shows how to use <b>InputText</b>:
            <code>
            $HtmlHelper.InputText( "nameArg", "valueArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputText(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates an input element of the text type of specified
            <paramref name="size"/> and <paramref name="maxlength"/>.
            <code>&lt;input type="text" name="nameArg" id="nameArg" value="valueArg" size="10" maxlength="10" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="size"><b>size</b> attribute value.</param>
            <param name="maxlength"><b>maxlength</b> attribute value.</param>
            <returns>HTML string with text type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputText( "nameArg", "valueArg", 10, 10 )</c> results in:
            <code>&lt;input type="text" name="nameArg" id="nameArg" value="valueArg" size="10" maxlength="10" /&gt;</code>
            </remarks>
            <example>This example shows how to use <b>InputText</b>:
            <code>
            $HtmlHelper.InputText( "nameArg", "valueArg", 10, 10 )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputText(System.String,System.String,System.Int32,System.Int32,System.Collections.IDictionary)">
            <summary>
            Creates an input element of the text type with specified
            <paramref name="size"/>, <paramref name="maxlength"/> and <paramref name="attributes"/>.
            <code>&lt;input type="text" name="nameArg" id="nameArg" value="valueArg" size="10" maxlength="10" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="size"><b>size</b> attribute value.</param>
            <param name="maxlength"><b>maxlength</b> attribute value.</param>
            <param name="attributes">Additional attributes for the <b>input</b> tag.</param>
            <returns>HTML string with text type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputText( "nameArg", "valueArg", 10, 10, IDictionary )</c> results in:
            <code>&lt;input type="text" name="nameArg" id="nameArg" value="valueArg" size="10" maxlength="10" key1="value1" key2="value2" /&gt;</code>
            <para>
            <paramref name="attributes"/> is used to generate additional attributes for the <b>label</b> tag.
            <see cref="P:System.Collections.IDictionary.Keys"/> are used to name attributes.
            <see cref="P:System.Collections.IDictionary.Values"/> are used to assign those attributes values.
            </para>
            </remarks>
            <example>This example shows how to use <b>InputText</b>:
            <code>
            $HtmlHelper.InputText( "nameArg", "valueArg", 10, 10, IDictionary )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputText(System.String,System.String,System.String)">
            <summary>
            Creates an input element of the text type with custom <paramref name="name"/> and <paramref name="id"/>.
            <code>&lt;input type="text" name="nameArg" id="idArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name"><b>name</b> attribute value.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="id"><b>id</b> attribute value.</param>
            <returns>HTML string with text type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputText( "nameArg", "valueArg", "idArg" )</c> results in:
            <code>&lt;input type="text" name="nameArg" id="idArg" value="valueArg" /&gt;</code>
            </remarks>
            <example>This example shows how to use <b>InputText</b>:
            <code>
            $HtmlHelper.InputText( "nameArg", "valueArg", "idArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputText(System.String,System.String,System.Collections.IDictionary)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates a hidden type input element.
             <code>&lt;input type=&quot;hidden&quot; name=&quot;nameArg&quot; id=&quot;nameArg&quot; value=&quot;valueArg&quot; /&gt;</code>
             </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputPassword(System.String)">
            <summary>
            Creates an input element of password type
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputPassword(System.String,System.String)">
            <summary>
            Creates an input element of password type
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputPassword(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates an input element of password type
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputHidden(System.String,System.String)">
            <summary>
            Creates an input hidden element
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with hidden type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputHidden( "nameArg", "valueArg" )</c> results in:
            <code>&lt;input type="hidden" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </remarks>
            <example>This example shows how to use <b>InputHidden</b>:
            <code>
            $HtmlHelper.InputHidden( "nameArg", "valueArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputHidden(System.String,System.Object)">
            <summary>
            Creates a hidden type input element.
            <code>&lt;input type="hidden" name="nameArg" id="nameArg" value="object" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.Object"/> to supply <see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with hidden type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputHidden( "nameArg", object )</c> results in:
            <code>&lt;input type="hidden" name="nameArg" id="nameArg" value="object" /&gt;</code>
            <para>
            <see cref="T:System.String"/> for <b>value</b> attribute is retrieved from <paramref name="value"/>
            via <see cref="M:System.Object.ToString"/>.
            </para>
            <para>If <paramref name="value"/> is <c>null</c> <see cref="F:System.String.Empty"/> is used as the <b>value</b>
            <see cref="T:System.String"/>.</para>
            </remarks>
            <example>This example shows how to use <b>InputHidden</b>:
            <code>
            $HtmlHelper.InputHidden( "nameArg", object  )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.SubmitButton(System.String)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates a submit button.
             <code>&lt;input type="submit" value="valueArg"  /&gt;</code>
             </summary>
             <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
             <returns>HTML string with submit type <b>input</b> tag.</returns>
             <remarks>Calling <c>SubmitButton( "valueArg" )</c> results in:
             <code>&lt;input type="submit" value="valueArg"  /&gt;</code>
             </remarks>
             <example>This example shows how to use <b>SubmitButton</b>:
             <code>
             $HtmlHelper.SubmitButton( "valueArg" )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.SubmitButton(System.String,System.Collections.IDictionary)">
            <summary>
            Creates a submit button.
            <code>&lt;input type="submit" value="valueArg" key1="value1" key2="value2"  /&gt;</code>
            </summary>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="attributes">Additional attributes for the <b>input</b> tag.</param>
            <remarks>Calling <c>SubmitButton( "valueArg", IDictionary )</c> results in:
            <code>&lt;input type="submit" value="valueArg" key1="value1" key2="value2"  /&gt;</code>
            <para>
            <paramref name="attributes"/> is used to generate additional attributes for the <b>label</b> tag.
            <see cref="P:System.Collections.IDictionary.Keys"/> are used to name attributes.
            <see cref="P:System.Collections.IDictionary.Values"/> are used to assign those attributes values.
            </para>
            </remarks>
            <example>This example shows how to use <b>SubmitButton</b>:
            <code>
            $HtmlHelper.SubmitButton( "valueArg", IDictionary )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Select(System.String)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates opening <b>select</b> tag.
             <code>&lt;select name="nameArg" id="nameArg"&gt;</code>
             </summary>
             <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
             <returns>HTML string with opening <b>select</b> tag.</returns>
             <remarks>Calling <c>Select( "nameArg" )</c> results in:
             <code>&lt;select name="nameArg" id="nameArg"&gt;</code>
             </remarks>
             <example>This example shows how to use <b>Select</b> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndSelect"/>:
             <code>
             $HtmlHelper.Select( "nameArg" )
             ...
             $HtmlHelper.EndSelect()
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Select(System.String,System.Collections.IDictionary)">
            <summary>
            Creates opening <b>select</b> tag.
            <code>&lt;select name="nameArg" id="nameArg" key1="value1" key2="value2" &gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="attributes">Additional attributes for the <b>select</b> tag.</param>
            <remarks>Calling <c>Select( "nameArg", IDictionary )</c> results in:
            <code>&lt;select name="nameArg" id="nameArg" key1="value1" key2="value2" &gt;</code>
            <para>
            <paramref name="attributes"/> is used to generate additional attributes for the <b>label</b> tag.
            <see cref="P:System.Collections.IDictionary.Keys"/> are used to name attributes.
            <see cref="P:System.Collections.IDictionary.Values"/> are used to assign those attributes values.
            </para>
            </remarks>
            <example>This example shows how to use <b>Select</b> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndSelect"/>:
            <code>
            $HtmlHelper.Select( "nameArg", IDictionary )
            ...
            $HtmlHelper.EndSelect()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndSelect">
            <summary>
            Creates a closing <b>select</b> tag.
            </summary>
            <remarks>Calling <c>EndSelect()</c> results in:
            <code>&lt;/select&gt;</code>
            </remarks>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Select(System.String)"/> together with <b>EndSelect</b>:
            <code>
            $HtmlHelper.Select( "nameArg" )
            ...
            $HtmlHelper.EndSelect()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.OptionGroup(System.String)">
            <summary>
            TODO: Document this!
            </summary>
            <param name="label"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOption(System.String,System.Object)">
            <summary>
            TODO: Document this!
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOption(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            TODO: Document this!
            </summary>
            <remarks>
            Valid html attributes include: selected and disabled
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptionsFromPrimitiveArray(System.Array,System.String)">
            <summary>
            Creates <b>option</b> elements from <see cref="T:System.Array"/>. Marks the
            option that matches the <paramref name="selected"/> argument (if provided).
            <code>
            &lt;option&gt;0&lt;/option&gt;
            &lt;option&gt;1&lt;/option&gt;
            ...
            &lt;option&gt;5&lt;/option&gt;
            &lt;option selected&gt;selectedArg&lt;/option&gt;
            &lt;option&gt;object&lt;/option&gt;
            </code>
            </summary>
            <param name="elems">Array of values for each <b>option</b> tag.</param>
            <param name="selected">Name of the <b>option</b> tag to mark selected.</param>
            <returns>HTML string with array of <b>option</b> tags.</returns>
            <remarks>Calling <c>CreateOptionsFromPrimitiveArray( Array, "selectedArg" )</c> results in:
            <code>
            &lt;option&gt;0&lt;/option&gt;
            &lt;option&gt;1&lt;/option&gt;
            &lt;option&gt;2&lt;/option&gt;
            &lt;option&gt;3&lt;/option&gt;
            &lt;option&gt;4&lt;/option&gt;
            &lt;option&gt;5&lt;/option&gt;
            &lt;option selected&gt;selectedArg&lt;/option&gt;
            &lt;option&gt;object&lt;/option&gt;
            </code>
            <para>
            Elements in the array are converted to <see cref="T:System.String"/> using <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)"/>.
            </para>
            </remarks>
            <example>This example shows how to use <b>CreateOptionsFromPrimitiveArray</b>:
            <code>
            $HtmlHelper.CreateOptionsFromPrimitiveArray( Array, "selectedArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptionsFromArray(System.Array,System.String,System.String)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates options elements from an <see cref="T:System.Array"/>.
             <code>
             &lt;option value="valueProp"&gt;textProp&lt;/option&gt;
             &lt;option value="0"&gt;textProp2&lt;/option&gt;
             &lt;option value="5"&gt;textProp3&lt;/option&gt;
             </code>
             <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptions(System.Collections.ICollection,System.String,System.String)"/>
             </summary>
             <param name="elems">Collection of objects each of which describes an <b>option</b> tag.</param>
             <param name="textProperty">Name of the <paramref name="elems"/>
             objects property with the value for each <b>option</b> tag's
             text.</param>
             <param name="valueProperty">Name of the <paramref name="elems"/> objects property with the value for each
             <b>option</b> tag's <b>value</b> attribute value.</param>
             <returns>HTML string with array of <b>option</b> tags.</returns>
             
             <remarks>Calling <c>CreateOptionsFromArray( Array, "textPropertyArg",
             "valuePropertyArg", object )</c> with specific type objects results in:
             <code>
             &lt;option value="valueProp"&gt;textProp&lt;/option&gt;
             &lt;option value="0"&gt;textProp2&lt;/option&gt;
             &lt;option value="5"&gt;textProp3&lt;/option&gt;
             </code>
             <para>Calling <c>CreateOptionsFromArray( Array, "textPropertyArg",
             "valuePropertyArg", object )</c> with random type objects results in:
             <code>
             &lt;option&gt;0&lt;/option&gt;
             &lt;option&gt;1&lt;/option&gt;
             &lt;option&gt;2&lt;/option&gt;
             &lt;option&gt;3&lt;/option&gt;
             &lt;option&gt;4&lt;/option&gt;
             &lt;option&gt;5&lt;/option&gt;
             &lt;option&gt;object&lt;/option&gt;
             &lt;option&gt;MR.Logic.Controllers.HtmlHelperController+SampleClass&lt;/option&gt;
             </code>
             Notice that the last <b>option</b> was generated from an object of the type
             with the properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/>, but the method
             is already in the mode of working with random type objects.
             <note>Explanation bellow describes two different modes of working with the method.</note>
             </para>
             <para>There are two possible usages of the method depending on
             the types of <see cref="T:System.Object"/>s which can be present in
             <paramref name="elems"/>:
             <list type="definition">
             <item>
            		<term>Random type objects</term>
            		<description>Array is full of
             random type objects. Properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/> aren't
             used. Instead <b>value</b> argument is ommited and <see cref="M:System.Object.ToString"/> is invoked on each item in <paramref name="elems"/> to retrieve text for an <b>option</b> tag.
            		</description>
            	</item>
             <item>
            		<term>Single type objects</term>
            		<description>Array is objects
             of one time. In this case <paramref name="textProperty"/> and
             <paramref name="valueProperty"/> can specify the names of the
             properties of that type to use for <b>option</b> tags
             generation.
            		</description>
            	</item>
             </list>
             <note>You cannot mix <i>random type objects</i> and <i>specific type objects</i>.
             <b>CreateOptionsFromArray</b>
             is looking at the first item in the <paramref name="elems"/>
             collection to get <see cref="T:System.Reflection.MethodInfo"/> to access specified
             properties. If usage is mixed either an unexpected exception will be
             thrown or options will have unexpected strings.
             </note>
             </para>
             <para><b>CreateOptionsFromArray</b> relies on <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptions(System.Collections.ICollection,System.String,System.String)"/> to generate
             all <b>option</b> tags.</para>
             </remarks>
             <example>This example shows how to use <b>CreateOptions</b>:
             <code>
             $HtmlHelper.CreateOptionsFromArray( ICollection, "textPropertyArg", "valuePropertyArg" )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptionsFromArray(System.Array,System.String,System.String,System.Object)">
            <summary>
            Creates options elements from an <see cref="T:System.Array"/>.
            <code>
            &lt;option value="valueProp" selected&gt;textProp&lt;/option&gt;
            &lt;option value="0"&gt;textProp2&lt;/option&gt;
            &lt;option value="5"&gt;textProp3&lt;/option&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptions(System.Collections.ICollection,System.String,System.String,System.Object)"/>
            </summary>
            <param name="elems">Collection of objects each of which describes an <b>option</b> tag.</param>
            <param name="textProperty">Name of the <paramref name="elems"/>
            objects property with the value for each <b>option</b> tag's
            text.</param>
            <param name="valueProperty">Name of the <paramref name="elems"/> objects property with the value for each
            <b>option</b> tag's <b>value</b> attribute value.</param>
            <param name="selectedValue"><see cref="T:System.Object"/> indicating which
            <b>option</b> tag is to be marked with <b>selected</b>
            attribute.</param>
            <returns>HTML string with array of <b>option</b> tags.</returns>
            
            <remarks>Calling <c>CreateOptionsFromArray( Array, "textPropertyArg",
            "valuePropertyArg", object )</c> with specific type objects results in:
            <code>
            &lt;option value="valueProp" selected&gt;textProp&lt;/option&gt;
            &lt;option value="0"&gt;textProp2&lt;/option&gt;
            &lt;option value="5"&gt;textProp3&lt;/option&gt;
            </code>
            <para>Calling <c>CreateOptionsFromArray( Array, "textPropertyArg",
            "valuePropertyArg", object )</c> with random type objects results in:
            <code>
            &lt;option&gt;0&lt;/option&gt;
            &lt;option&gt;1&lt;/option&gt;
            &lt;option&gt;2&lt;/option&gt;
            &lt;option&gt;3&lt;/option&gt;
            &lt;option&gt;4&lt;/option&gt;
            &lt;option&gt;5&lt;/option&gt;
            &lt;option selected&gt;object&lt;/option&gt;
            &lt;option&gt;MR.Logic.Controllers.HtmlHelperController+SampleClass&lt;/option&gt;
            </code>
            Notice that the last <b>option</b> was generated from an object of the type
            with the properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/>, but the method
            is already in the mode of working with random type objects.
            <note>Explanation bellow describes two different modes of working with the method.</note>
            </para>
            <para>There are two possible usages of the method depending on
            the types of <see cref="T:System.Object"/>s which can be present in
            <paramref name="elems"/>:
            <list type="definition">
            <item>
            	<term>Random type objects</term>
            	<description>Array is full of
            random type objects. Properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/> aren't
            used. Instead <b>value</b> argument is ommited and <see cref="M:System.Object.ToString"/> is invoked on each item in <paramref name="elems"/> to retrieve text for an <b>option</b> tag.
            	</description>
            </item>
            <item>
            	<term>Single type objects</term>
            	<description>Array is objects
            of one time. In this case <paramref name="textProperty"/> and
            <paramref name="valueProperty"/> can specify the names of the
            properties of that type to use for <b>option</b> tags
            generation.
            	</description>
            </item>
            </list>
            <note>You cannot mix <i>random type objects</i> and <i>specific type objects</i>.
            <b>CreateOptionsFromArray</b>
            is looking at the first item in the <paramref name="elems"/>
            collection to get <see cref="T:System.Reflection.MethodInfo"/> to access specified
            properties. If usage is mixed either an unexpected exception will be
            thrown or options will have unexpected strings.
            </note>
            </para>
            <para><b>CreateOptionsFromArray</b> relies on <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptions(System.Collections.ICollection,System.String,System.String,System.Object)"/> to generate
            all <b>option</b> tags.</para>
            </remarks>
            <example>This example shows how to use <b>CreateOptions</b>:
            <code>
            $HtmlHelper.CreateOptionsFromArray( ICollection, "textPropertyArg", "valuePropertyArg", object )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptions(System.Collections.ICollection,System.String,System.String)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates options elements from an <see cref="T:System.Collections.ICollection"/>.
             <code>
             &lt;option value="valueProp"&gt;textProp&lt;/option&gt;
             &lt;option value="0"&gt;textProp2&lt;/option&gt;
             &lt;option value="5"&gt;textProp3&lt;/option&gt;
             </code>
             </summary>
             <param name="elems">Collection of objects each of which describes an <b>option</b> tag.</param>
             <param name="textProperty">Name of the <paramref name="elems"/>
             objects property with the value for each <b>option</b> tag's
             text.</param>
             <param name="valueProperty">Name of the <paramref name="elems"/> objects property with the value for each
             <b>option</b> tag's <b>value</b> attribute value.</param>
             <returns>HTML string with array of <b>option</b> tags.</returns>
             
             <remarks>Calling <c>CreateOptions( ICollection, "textPropertyArg",
             "valuePropertyArg", object )</c> with specific type objects results in:
             <code>
             &lt;option value="valueProp"&gt;textProp&lt;/option&gt;
             &lt;option value="0"&gt;textProp2&lt;/option&gt;
             &lt;option value="5"&gt;textProp3&lt;/option&gt;
             </code>
             <para>Calling <c>CreateOptions( ICollection, "textPropertyArg",
             "valuePropertyArg", object )</c> with random type objects results in:
             <code>
             &lt;option&gt;0&lt;/option&gt;
             &lt;option&gt;1&lt;/option&gt;
             &lt;option&gt;2&lt;/option&gt;
             &lt;option&gt;3&lt;/option&gt;
             &lt;option&gt;4&lt;/option&gt;
             &lt;option&gt;5&lt;/option&gt;
             &lt;option&gt;object&lt;/option&gt;
             &lt;option&gt;MR.Logic.Controllers.HtmlHelperController+SampleClass&lt;/option&gt;
             </code>
             Notice that the last <b>option</b> was generated from an object of the type
             with the properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/>, but the method
             is already in the mode of working with random type objects.
             <note>Explanation bellow describes two different modes of working with the method.</note>
             </para>
             <para>There are two possible usages of the method depending on
             the types of <see cref="T:System.Object"/>s which can be present in
             <paramref name="elems"/>:
             <list type="definition">
             <item>
            		<term>Random type objects</term>
            		<description>Array is full of
             random type objects. Properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/> aren't
             used. Instead <b>value</b> argument is ommited and <see cref="M:System.Object.ToString"/> is invoked on each item in <paramref name="elems"/> to retrieve text for an <b>option</b> tag.
            		</description>
            	</item>
             <item>
            		<term>Single type objects</term>
            		<description>Array is objects
             of one time. In this case <paramref name="textProperty"/> and
             <paramref name="valueProperty"/> can specify the names of the
             properties of that type to use for <b>option</b> tags
             generation.
            		</description>
            	</item>
             </list>
             <note>You cannot mix <i>random type objects</i> and <i>specific type objects</i>. <b>CreateOptions</b>
             is looking at the first item in the <paramref name="elems"/>
             collection to get <see cref="T:System.Reflection.MethodInfo"/> to access specified
             properties. If usage is mixed either an unexpected exception will be
             thrown or options will have unexpected strings.
             </note>
             </para>
             </remarks>
             <example>This example shows how to use <b>CreateOptions</b>:
             <code>
             $HtmlHelper.CreateOptions( ICollection, "textPropertyArg", "valuePropertyArg" )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptions(System.Collections.ICollection,System.String,System.String,System.Object)">
            <summary>
            Creates options elements from an <see cref="T:System.Collections.ICollection"/>.
            <code>
            &lt;option value="valueProp" selected&gt;textProp&lt;/option&gt;
            &lt;option value="0"&gt;textProp2&lt;/option&gt;
            &lt;option value="5"&gt;textProp3&lt;/option&gt;
            </code>
            </summary>
            <param name="elems">Collection of objects each of which describes an <b>option</b> tag.</param>
            <param name="textProperty">Name of the <paramref name="elems"/>
            objects property with the value for each <b>option</b> tag's
            text.</param>
            <param name="valueProperty">Name of the <paramref name="elems"/> objects property with the value for each
            <b>option</b> tag's <b>value</b> attribute value.</param>
            <param name="selectedValue"><see cref="T:System.Object"/> indicating which
            <b>option</b> tag is to be marked with <b>selected</b>
            attribute.</param>
            <returns>HTML string with array of <b>option</b> tags.</returns>
            
            <remarks>Calling <c>CreateOptions( ICollection, "textPropertyArg",
            "valuePropertyArg", object )</c> with specific type objects results in:
            <code>
            &lt;option value="valueProp" selected&gt;textProp&lt;/option&gt;
            &lt;option value="0"&gt;textProp2&lt;/option&gt;
            &lt;option value="5"&gt;textProp3&lt;/option&gt;
            </code>
            <para>Calling <c>CreateOptions( ICollection, "textPropertyArg",
            "valuePropertyArg", object )</c> with random type objects results in:
            <code>
            &lt;option&gt;0&lt;/option&gt;
            &lt;option&gt;1&lt;/option&gt;
            &lt;option&gt;2&lt;/option&gt;
            &lt;option&gt;3&lt;/option&gt;
            &lt;option&gt;4&lt;/option&gt;
            &lt;option&gt;5&lt;/option&gt;
            &lt;option selected&gt;object&lt;/option&gt;
            &lt;option&gt;MR.Logic.Controllers.HtmlHelperController+SampleClass&lt;/option&gt;
            </code>
            Notice that the last <b>option</b> was generated from an object of the type
            with the properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/>, but the method
            is already in the mode of working with random type objects.
            <note>Explanation bellow describes two different modes of working with the method.</note>
            </para>
            <para>There are two possible usages of the method depending on
            the types of <see cref="T:System.Object"/>s which can be present in
            <paramref name="elems"/>:
            <list type="definition">
            <item>
            	<term>Random type objects</term>
            	<description>Array is full of
            random type objects. Properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/> aren't
            used. Instead <b>value</b> argument is ommited and <see cref="M:System.Object.ToString"/> is invoked on each item in <paramref name="elems"/> to retrieve text for an <b>option</b> tag.
            	</description>
            </item>
            <item>
            	<term>Single type objects</term>
            	<description>Array is objects
            of one time. In this case <paramref name="textProperty"/> and
            <paramref name="valueProperty"/> can specify the names of the
            properties of that type to use for <b>option</b> tags
            generation.
            	</description>
            </item>
            </list>
            <note>You cannot mix <i>random type objects</i> and <i>specific type objects</i>.
            <b>CreateOptions</b>
            is looking at the first item in the <paramref name="elems"/>
            collection to get <see cref="T:System.Reflection.MethodInfo"/> to access specified
            properties. If usage is mixed either an unexpected exception will be
            thrown or options will have unexpected strings.
            </note>
            </para>
            </remarks>
            <example>This example shows how to use <b>CreateOptions</b>:
            <code>
            $HtmlHelper.CreateOptions( ICollection, "textPropertyArg", "valuePropertyArg", object )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.IsSelected(System.Object,System.Object,System.Boolean)">
            <summary>
            Determines whether the specified value is selected.
            </summary>
            <param name="value">Value to be tested.</param>
            <param name="selectedValue">Selected value.</param>
            <param name="isMultiple"><see langword="true"/> if <paramref name="selectedValue"/> is
            <see cref="P:System.Type.IsArray"/>; otherwise, <see langword="false"/>.</param>
            <returns>
            	<see langword="true"/> if the specified <paramref name="value"/> is selected; otherwise, <see langword="false"/>.
            </returns>
            <remarks>Specified <paramref name="value"/> is selected if it <see cref="M:System.Object.Equals(System.Object)"/>
            to the <paramref name="selectedValue"/>. Or if <paramref name="selectedValue"/> is an
            array <paramref name="value"/> is selected if <see cref="M:System.Array.IndexOf(System.Array,System.Object)"/> can find it
            in <paramref name="selectedValue"/>.</remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.GetMethod(System.Object,System.String)">
            <summary>
            Gets the property get method.
            </summary>
            <param name="elem">Object specifying the type for which to get the method.</param>
            <param name="property">Property name.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> to be used to retrieve the property value.
            If <paramref name="property"/> is <c>null</c> <c>null</c> is returned.</returns>
            <remarks>This method is used to get the <see cref="T:System.Reflection.MethodInfo"/> to retrieve
            specified property from the specified type.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown is <paramref name="elem"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.BuildUnorderedList(System.Collections.ICollection)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Builds an unordered <b>ul</b> list from supplied <see cref="T:System.Collections.ICollection"/>.
             <code>
             &lt;ul&gt;
             &lt;li&gt;0&lt;/li&gt;
             ...
             &lt;li&gt;object&lt;/li&gt;
             &lt;/ul&gt;
             </code>
             </summary>
             <param name="elements">Collection with items to use for the list generation.</param>
             <returns>HTML string with <b>ul</b> tag list.</returns>
             <remarks>Calling <c>BuildUnorderedList( ICollection )</c> results in:
             <code>
             &lt;ul&gt;
             &lt;li&gt;0&lt;/li&gt;
             &lt;li&gt;1&lt;/li&gt;
             &lt;li&gt;2&lt;/li&gt;
             &lt;li&gt;3&lt;/li&gt;
             &lt;li&gt;4&lt;/li&gt;
             &lt;li&gt;5&lt;/li&gt;
             &lt;li&gt;object&lt;/li&gt;
             &lt;/ul&gt;
             </code>
             <para>Items in <paramref name="elements"/> are converted to string through
             <see cref="M:System.Object.ToString"/>.</para>
             </remarks>
             <example>This example shows how to use <b>BuildUnorderedList</b>:
             <code>
             $HtmlHelper.BuildUnorderedList( ICollection )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.BuildUnorderedList(System.Collections.ICollection,System.String,System.String)">
            <summary>
            Builds an unordered <b>ul</b> list from supplied <see cref="T:System.Collections.ICollection"/> with
            <b>ul</b> and <b>li</b> tags CSS class set to supplied attributes.
            <code>
            &lt;ol class="styleClassArg"&gt;
            &lt;li class="itemClassArg"&gt;0&lt;/li&gt;
            ...
            &lt;li class="itemClassArg"&gt;object&lt;/li&gt;
            &lt;/ol&gt;
            </code>
            </summary>
            <param name="elements">Collection with items to use for the list generation.</param>
            <param name="styleClass">CSS class name of the list <b>ul</b> tag.</param>
            <param name="itemClass">CSS class name of the list item <b>li</b> tag.</param>
            <returns>HTML string with <b>ul</b> tag list.</returns>
            <remarks>Calling <c>BuildUnorderedList( ICollection, "styleClassArg", "itemClassArg" )</c> results in:
            <code>
            &lt;ol class="styleClassArg"&gt;
            &lt;li class="itemClassArg"&gt;0&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;1&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;2&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;3&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;4&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;5&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;object&lt;/li&gt;
            &lt;/ol&gt;
            </code>
            <para>Items in <paramref name="elements"/> are converted to string through
            <see cref="M:System.Object.ToString"/>.</para>
            </remarks>
            <example>This example shows how to use <b>BuildOrderedList</b>:
            <code>
            $HtmlHelper.BuildUnorderedList( ICollection, "styleClassArg", "itemClassArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.BuildOrderedList(System.Collections.ICollection)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Builds an ordered <b>ol</b> list from supplied <see cref="T:System.Collections.ICollection"/>.
             <code>
             &lt;ol&gt;
             &lt;li&gt;0&lt;/li&gt;
             ...
             &lt;li&gt;object&lt;/li&gt;
             &lt;/ol&gt;
             </code>
             </summary>
             <param name="elements">Collection with items to use for the list generation.</param>
             <returns>HTML string with <b>ol</b> tag list.</returns>
             <remarks>Calling <c>BuildOrderedList( ICollection )</c> results in:
             <code>
             &lt;ol&gt;
             &lt;li&gt;0&lt;/li&gt;
             &lt;li&gt;1&lt;/li&gt;
             &lt;li&gt;2&lt;/li&gt;
             &lt;li&gt;3&lt;/li&gt;
             &lt;li&gt;4&lt;/li&gt;
             &lt;li&gt;5&lt;/li&gt;
             &lt;li&gt;object&lt;/li&gt;
             &lt;/ol&gt;
             </code>
             <para>Items in <paramref name="elements"/> are converted to string through
             <see cref="M:System.Object.ToString"/>.</para>
             </remarks>
             <example>This example shows how to use <b>BuildOrderedList</b>:
             <code>
             $HtmlHelper.BuildOrderedList( ICollection )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.BuildOrderedList(System.Collections.ICollection,System.String,System.String)">
            <summary>
            Builds an ordered <b>ol</b> list from supplied <see cref="T:System.Collections.ICollection"/> with
            <b>ol</b> and <b>li</b> tags CSS class set to supplied attributes.
            <code>
            &lt;ol class="styleClassArg"&gt;
            &lt;li class="itemClassArg"&gt;0&lt;/li&gt;
            ...
            &lt;li class="itemClassArg"&gt;object&lt;/li&gt;
            &lt;/ol&gt;
            </code>
            </summary>
            <param name="elements">Collection with items to use for the list generation.</param>
            <param name="styleClass">CSS class name of the list <b>ol</b> tag.</param>
            <param name="itemClass">CSS class name of the list item <b>li</b> tag.</param>
            <returns>HTML string with <b>ol</b> tag list.</returns>
            <remarks>Calling <c>BuildOrderedList( ICollection, "styleClassArg", "itemClassArg" )</c> results in:
            <code>
            &lt;ol class="styleClassArg"&gt;
            &lt;li class="itemClassArg"&gt;0&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;1&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;2&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;3&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;4&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;5&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;object&lt;/li&gt;
            &lt;/ol&gt;
            </code>
            <para>Items in <paramref name="elements"/> are converted to string through
            <see cref="M:System.Object.ToString"/>.</para>
            </remarks>
            <example>This example shows how to use <b>BuildOrderedList</b>:
            <code>
            $HtmlHelper.BuildOrderedList( ICollection, "styleClassArg", "itemClassArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.BuildList(System.String,System.Collections.ICollection,System.String,System.String)">
            <summary>
            Builds a list with list tag specified by <paramref name="tag"/>
            from supplied <see cref="T:System.Collections.ICollection"/> with
            list tag and <b>li</b> tags CSS class set to supplied attributes.
            <code>
            &lt;listTag class="styleClassArg"&gt;
            &lt;li class="itemClassArg"&gt;0&lt;/li&gt;
            ...
            &lt;li class="itemClassArg"&gt;object&lt;/li&gt;
            &lt;/listTag&gt;
            </code>
            </summary>
            <param name="tag">List tag name.</param>
            <param name="elements">Collection with items to use for the list generation.</param>
            <param name="styleClass">CSS class name of the list <b>ol</b> tag.</param>
            <param name="itemClass">CSS class name of the list item <b>li</b> tag.</param>
            <returns>HTML string with list of the requested type.</returns>
            <remarks>This method is can be used to generate custom type HTML list.
            Currently HTML support only two types of lists ordered (<b>ol</b> tag) and unodered
            (<b>ul</b>tag). In general this method should be used by other methods responsible
            for constructing some specific list.
            <para>
            Calling <c>BuildList( "listTag", ICollection, "styleClassArg", "itemClassArg" )</c> results in:
            <code>
            &lt;listTag class="styleClassArg"&gt;
            &lt;li class="itemClassArg"&gt;0&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;1&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;2&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;3&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;4&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;5&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;object&lt;/li&gt;
            &lt;/listTag&gt;
            </code>
            </para>
            <para>Items in <paramref name="elements"/> are converted to string through
            <see cref="M:System.Object.ToString"/>.</para>
            </remarks>
            <example>This example shows how to use <b>BuildList</b>:
            <code>
            BuildList("ol", elements, styleClass, itemClass);
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.BuildListItem(System.String,System.String)">
            <summary>
            Generates a list item <b>li</b> tag.
            <code>
            &lt;li class=&quot;itemClassArg&quot;&gt;object&lt;/li&gt;
            </code>
            </summary>
            <param name="item">Item text.</param>
            <param name="itemClass">Item CSS class name.</param>
            <returns>HTML string with a single <b>li</b> tag.</returns>
            <remarks>This method should be used to assist list generation.
            <para>
            Calling <c>BuildListItem( "object", "itemClassArg" )</c> results in:
            <code>
            &lt;li class=&quot;itemClassArg&quot;&gt;object&lt;/li&gt;
            </code>
            </para>
            </remarks>
            <example>This example shows how to use <b>BuildListItem</b>:
            <code>
            BuildListItem(item.ToString(), itemClass);
            </code>
            </example>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.DataObtentionDelegate">
            <summary>
            Used as callback handler to obtain the items 
            to be displayed. 
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.PaginationHelper">
            <summary>
            This helper allows you to easily paginate through a data source 
            (anything that implements <see cref="T:System.Collections.IList"/>)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePageLink(System.Int32,System.String)">
            <summary>
            Creates a link to navigate to a specific page
            </summary>
            <param name="page"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePagination(System.Collections.IList,System.Int32)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source
            </summary>
            <param name="datasource">Data source to be used as target of the pagination</param>
            <param name="pageSize">Page size</param>
            <returns>A <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePagination(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source
            </summary>
            <param name="datasource">Data source to be used as target of the pagination</param>
            <param name="pageSize">Page size</param>
            <param name="currentPage">current page index (1 based)</param>
            <returns>A <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePagination``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source
            </summary>
            <param name="datasource">Data source to be used as target of the pagination</param>
            <param name="pageSize">Page size</param>
            <returns>A <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePagination``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source
            </summary>
            <param name="datasource">Data source to be used as target of the pagination</param>
            <param name="pageSize">Page size</param>
            <param name="currentPage">current page index (1 based)</param>
            <returns>A <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreateCachedPagination(System.String,System.Int32,Castle.MonoRail.Framework.Helpers.DataObtentionDelegate)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source. This method first looks for the datasource 
            in the <see cref="T:System.Web.Caching.Cache"/> and if not found, 
            it invokes the <c>dataObtentionCallback</c> and caches the result
            using the specifed <c>cacheKey</c>
            </summary>
            <param name="cacheKey">Cache key used to query/store the datasource</param>
            <param name="pageSize">Page size</param>
            <param name="dataObtentionCallback">Callback to be used to populate the cache</param>
            <returns>A <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> instance</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.Page">
            <summary>
            Represents the sliced data and offers
            a few read only properties to create a pagination bar.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.GenericPage`1">
            <summary>
            Represents the sliced data and offers
            a few read only properties to create a pagination bar.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.SetOperation">
            <summary>
            
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.NoIterationState">
            <summary>
            Used for empty/null datasources
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ValidationHelper">
            <summary>
            Helper that provides client-side validation.
            </summary>
            <remarks>The javascript core lib is extension of Peter Bailey's 
            fValidate(http://www.peterbailey.net/fValidate/).</remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.SetSubmitOptions(System.Collections.IDictionary)">
            <summary>
            Configure the submit and validation options.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.SetSubmitOptions(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Configure the submit and validation options.
            </summary>
            <param name="confirm"><b>True</b> for submit confirmation. Otherwise, <b>false</b>.</param>
            <param name="disable"><b>True</b> for submit buttons disabling.</param>
            <param name="groupError"><b>True</b> for error grouping.</param>
            <param name="errorMode"><see cref="T:System.Int32"/> representing the error mode.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.InstallScripts">
            <summary>
            Automatic Script installer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.InstallWithCustomMsg(System.String)">
            <summary>
            Install the script with a custom message file(based on the fValidate I18N file).
            </summary>
            <param name="scriptFilePath">A <see cref="T:System.String"/> represeting the path and file name</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.InstallScripts(System.String)">
            <summary>
            Manual Script Installer.
            </summary>
            <param name="baseDir">The virtual path of the dir where the fValidate are.</param>
            <remarks>You'll need to have the files physically</remarks>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.InstallScripts(System.String,System.String)">
            <summary>
            Manual Script Installer.
            </summary>
            <param name="baseDir">The virtual path of the dir where the fValidate are.</param>
            <param name="lang">The language of the messages.</param>
            <remarks>You'll need to have the files physically</remarks>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.GetValidationTriggerFunction">
            <summary>
            Returns the form validation function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.GetValidationTriggerFunction(System.String)">
            <summary>
            Returns the form validation function.
            </summary>
            <param name="formElement">Javascript expression that return the desired form.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.GetValidationTriggerFunction(System.String,System.Collections.IDictionary)">
            <summary>
            Returns the form validation function where you can override the options:
            </summary>
            <remarks>
            The options that can be overriden:
            confirm (bool), disable (bool), groupError (bool), errorMode (int)
            </remarks>
            <param name="formElement">Javascript expression that return the desired form.</param>
            <param name="options">Custom options</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.ValidationHelper.VirtualDir">
            <summary>
            Gets or Sets the Virtual Directory the scripts are in.
            </summary>
            <remarks>The default is <see cref="P:Castle.MonoRail.Framework.IRailsEngineContext.ApplicationPath"/>.</remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.WizardHelper">
            <summary>
            Provide useful helpers to be used in a layout view
            or in the wizards steps views.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasNextStep">
            <summary>
            Returns <c>true</c> if the current wizard 
            flow has a next step.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasPreviousStep">
            <summary>
            Returns <c>true</c> if the current wizard
            flow has an accessible previous step.
            </summary>
            <remarks>
            This will only return <c>true</c> if not
            the first step
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToStep(System.String,Castle.MonoRail.Framework.WizardStepPage)">
            <overloads>This method has three overloads.</overloads>
            <summary>
            Creates an anchor tag (link) to the specified step.
            <code>
            &lt;a href=&quot;/page2.rails&quot;&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <param name="linkText">The label for the step</param>
            <param name="step">The WizardStepPage to link to</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToStep(System.String,Castle.MonoRail.Framework.WizardStepPage,System.Object)">
            <summary>
            Creates an anchor tag (link) to the specified step.
            <code>
            &lt;a href=&quot;/page2.rails&quot;&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <param name="linkText">The label for the step</param>
            <param name="step">The WizardStepPage to link to</param>
            <param name="id">Object to use for the action ID argument.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToStep(System.String,Castle.MonoRail.Framework.WizardStepPage,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates an anchor tag (link) to the specified step.
            <code>
            &lt;a href=&quot;/page2.rails&quot;&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <param name="linkText">The label for the step</param>
            <param name="step">The WizardStepPage to link to</param>
            <param name="id">Object to use for the action ID argument.</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToNext(System.String)">
            <overloads>This method has four overloads.</overloads>
            <summary>
            Creates an anchor tag (link) to the next step.
            <code>
            &lt;a href="/page2.rails"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a next step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasNextStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToNext(System.String,System.Collections.IDictionary)">
            <summary>
            Creates an anchor tag (link) to the next step.
            <code>
            &lt;a href="/page2.rails"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a next step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasNextStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToNext(System.String,System.Object)">
            <summary>
            Creates an anchor tag (link) with an id attribute to the next step.
            <code>
            &lt;a href="/page2.rails?Id=id"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a next step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasNextStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <param name="id">Object to use for the action ID argument.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToNext(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates an anchor tag (link) with an id attribute to the next step.
            <code>
            &lt;a href="/page2.rails?Id=id"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a previous step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasNextStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <param name="id">Object to use for the action ID argument.</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToPrevious(System.String)">
            <overloads>This method has four overloads.</overloads>
            <summary>
            Creates an anchor tag (link) to the previous step.
            <code>
            &lt;a href="/page2.rails"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a previous step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasPreviousStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToPrevious(System.String,System.Collections.IDictionary)">
            <summary>
            Creates an anchor tag (link) to the previous step.
            <code>
            &lt;a href="/page2.rails"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a previous step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasPreviousStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToPrevious(System.String,System.Object)">
            <summary>
            Creates an anchor tag (link) with an id attribute to the previous step.
            <code>
            &lt;a href="/page2.rails?Id=id"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a previous step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasPreviousStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <param name="id">Object to use for the action ID argument.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToPrevious(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates an anchor tag (link) with an id attribute to the previous step.
            <code>
            &lt;a href="/page2.rails?Id=id"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a previous step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasPreviousStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <param name="id">Object to use for the action ID argument.</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.WizardHelper.PreviousStepName">
            <summary>
            Returns the name of the previous step
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.WizardHelper.NextStepName">
            <summary>
            Returns the name of the next step
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ActionMetaDescriptor">
            <summary>
            Holds the meta information for a specific action
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ControllerDescriptor">
            <summary>
            Represents the information about a <see cref="T:Castle.MonoRail.Framework.Controller"/>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor">
            <summary>
            Holds all meta information a controller might 
            expose, so the attributes are collected only once.
            This is a huge performance boost. 
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.FilterDescriptor">
            <summary>
            Represents the meta information and type of
            an implementation of <see cref="T:Castle.MonoRail.Framework.IFilter"/>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.HelperDescriptor">
            <summary>
            Represents the information about a Helper class
            associated with a <see cref="T:Castle.MonoRail.Framework.Controller"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.DefaultFilterDescriptorProvider">
            <summary>
            Creates <see cref="T:Castle.MonoRail.Framework.Internal.FilterDescriptor"/> from attributes 
            associated with the <see cref="T:Castle.MonoRail.Framework.Controller"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IFilterDescriptorProvider">
            <summary>
            Defines the contract to an implementation 
            that wish to create <see cref="T:Castle.MonoRail.Framework.Internal.FilterDescriptor"/>.
            </summary>
            <remarks>
            The default implementation creates the descriptors
            based on <see cref="T:Castle.MonoRail.Framework.FilterAttribute"/> associated
            with the controller
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IProvider">
            <summary>
            Base interface for providers
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IFilterDescriptorProvider.CollectFilters(System.Type)">
            <summary>
            Implementors should collect the filter information
            and return descriptors instances, or an empty array if none 
            was found.
            </summary>
            <param name="controllerType">The controller type</param>
            <returns>An array of <see cref="T:Castle.MonoRail.Framework.Internal.FilterDescriptor"/></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.DefaultFilterDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultFilterDescriptorProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.DefaultHelperDescriptorProvider">
            <summary>
            Creates <see cref="T:Castle.MonoRail.Framework.Internal.HelperDescriptor"/> from attributes 
            associated with the <see cref="T:Castle.MonoRail.Framework.Controller"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IHelperDescriptorProvider">
            <summary>
            Defines the contract to an implementation 
            that wish to create <see cref="T:Castle.MonoRail.Framework.Internal.HelperDescriptor"/>.
            </summary>
            <remarks>
            The default implementation creates the descriptors
            based on <see cref="T:Castle.MonoRail.Framework.HelperAttribute"/> associated
            with the controller
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IHelperDescriptorProvider.CollectHelpers(System.Type)">
            <summary>
            Implementors should collect the helper information
            and return descriptors instances, or an empty array if none 
            was found.
            </summary>
            <param name="controllerType">The controller type</param>
            <returns>An array of <see cref="T:Castle.MonoRail.Framework.Internal.HelperDescriptor"/></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.DefaultHelperDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultHelperDescriptorProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.DefaultLayoutDescriptorProvider">
            <summary>
            Creates <see cref="T:Castle.MonoRail.Framework.Internal.LayoutDescriptor"/> from attributes 
            associated with the <see cref="T:Castle.MonoRail.Framework.Controller"/> and its actions
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ILayoutDescriptorProvider">
            <summary>
            Defines the contract to an implementation 
            that wish to create <see cref="T:Castle.MonoRail.Framework.Internal.LayoutDescriptor"/>.
            </summary>
            <remarks>
            The default implementation creates the descriptors
            based on <see cref="T:Castle.MonoRail.Framework.LayoutAttribute"/> associated
            with the controller
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ILayoutDescriptorProvider.CollectLayout(System.Reflection.MemberInfo)">
            <summary>
            Implementors should collect the layout information
            and return a descriptor instance, or null if none 
            was found.
            </summary>
            <param name="memberInfo">The controller type or action (MethodInfo)</param>
            <returns>An <see cref="T:Castle.MonoRail.Framework.Internal.LayoutDescriptor"/> instance</returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.DefaultLayoutDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultLayoutDescriptorProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.DefaultRescueDescriptorProvider">
            <summary>
            Creates <see cref="T:Castle.MonoRail.Framework.Internal.RescueDescriptor"/> from attributes 
            associated with the <see cref="T:Castle.MonoRail.Framework.Controller"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IRescueDescriptorProvider">
            <summary>
            Defines the contract to an implementation 
            that wish to create <see cref="T:Castle.MonoRail.Framework.Internal.RescueDescriptor"/>.
            </summary>
            <remarks>
            The default implementation creates the descriptors
            based on <see cref="T:Castle.MonoRail.Framework.RescueAttribute"/> associated
            with the controller
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IRescueDescriptorProvider.CollectRescues(System.Reflection.MemberInfo)">
            <summary>
            Implementors should collect the rescue information
            and return descriptors instances, or an empty array if none 
            was found.
            </summary>
            <param name="memberInfo">The controller type or the action (MethodInfo)</param>
            <returns>An array of <see cref="T:Castle.MonoRail.Framework.Internal.RescueDescriptor"/></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.DefaultRescueDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultRescueDescriptorProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.DefaultResourceDescriptorProvider">
            <summary>
            Creates <see cref="T:Castle.MonoRail.Framework.Internal.ResourceDescriptor"/> from attributes 
            associated with the <see cref="T:Castle.MonoRail.Framework.Controller"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IResourceDescriptorProvider">
            <summary>
            Defines the contract to an implementation 
            that wish to create <see cref="T:Castle.MonoRail.Framework.Internal.ResourceDescriptor"/>.
            </summary>
            <remarks>
            The default implementation creates the descriptors
            based on <see cref="T:Castle.MonoRail.Framework.ResourceAttribute"/> associated
            with the controller
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IResourceDescriptorProvider.CollectResources(System.Reflection.MemberInfo)">
            <summary>
            Implementors should collect the resource information
            and return descriptors instances, or an empty array if none 
            was found.
            </summary>
            <param name="member">The controller or action (MethodInfo)</param>
            <returns>An array of <see cref="T:Castle.MonoRail.Framework.Internal.ResourceDescriptor"/></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.DefaultResourceDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultResourceDescriptorProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.Test.TestContextHolder">
            <summary>
            Helper class to store the context to be used 
            for the test cases
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ResourceDictionary">
            <summary>
            Simple strong typed dictionary for IResource instances.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ResourceFacade">
            <summary>
            Simple facade that provides the IResource interface to a
            ResourceSet instance.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IResource">
            <summary>
            Dictates the contract for resources that are publishable
            through the PropertyBag context.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResource.GetString(System.String)">
            <summary>
            Returns the object linked to the specific key as a string.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResource.GetObject(System.String)">
            <summary>
            Returns the object linked to the specific key.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResource.Item(System.String)">
            <summary>
            Returns the object linked to the specific key.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.UrlInfo">
            <summary>
            Represents the splitted information on a Url.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.UrlInfo.CreateAbsoluteRailsUrl(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an absolute MonoRail url.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.UrlInfo.CreateAbsoluteRailsUrl(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates an absolute MonoRail url.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.UrlInfo.Extension">
            <summary>
            The URL extension, without the leading dot.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.UrlTokenizer">
            <summary>
            Extracts the information from a Url Path into area, controller name and action.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.UrlTokenizer.GetExtension(System.String)">
            <summary>
            Gets the extension of the requested urls page without the preceding period.
            </summary>
            <param name="url">URL.</param>
            <returns>The page extensino of the provided URL.</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.UrlTokenizerException">
            <summary>
            Represents a problem during the Url information extraction.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.Utils.ControllerInspectionUtil">
            <summary>
            Utilities methods to inspect the controller Type
            and gathers its name and area.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.Utils.ControllerInspectionUtil.Inspect(System.Type)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Internal.ControllerDescriptor"/> based on the conventions
            and possible attributes found for the Controller Type specified
            </summary>
            <param name="controllerType">The controller type</param>
            <returns>A controller descriptor</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.AbstractControllerFactory">
            <summary>
            Base implementation of <see cref="T:Castle.MonoRail.Framework.IControllerFactory"/>
            using the <see cref="T:Castle.MonoRail.Framework.Services.DefaultControllerTree"/> to build an hierarchy
            of controllers and the areas they belong to.
            <seealso cref="T:Castle.MonoRail.Framework.Services.DefaultControllerTree"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IControllerFactory">
            <summary>
            Depicts the contract the engine has 
            to perform the creation and disposal of
            <see cref="T:Castle.MonoRail.Framework.Controller"/> instances.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerFactory.CreateController(Castle.MonoRail.Framework.Internal.UrlInfo)">
            <summary>
            Implementors should perform their logic to 
            return a instance of <see cref="T:Castle.MonoRail.Framework.Controller"/>.
            If the <see cref="T:Castle.MonoRail.Framework.Controller"/> can not be found,
            it should return <c>null</c>.
            </summary>
            <param name="urlInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerFactory.Release(Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should perform their logic 
            to release the <see cref="T:Castle.MonoRail.Framework.Controller"/> instance
            and its resources.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.AbstractControllerFactory.tree">
            <summary>
            The controller tree. A binary tree that contains
            all controllers registered
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.AbstractControllerFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractControllerFactory.#ctor">
            <summary>
            Initializes an <c>AbstractControllerFactory</c> instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractControllerFactory.Initialize">
            <summary>
            Invoked by the framework in order to initialize the state
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractControllerFactory.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractControllerFactory.AddBuiltInControllers">
            <summary>
            Register built-in controller that serve static files
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory">
            <summary>
            Base implementation for <see cref="T:Castle.MonoRail.Framework.IViewComponentFactory"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IViewComponentFactory">
            <summary>
            Depicts the contract used by the view engine
            to obtain implementations of <see cref="T:Castle.MonoRail.Framework.ViewComponent"/>.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.components">
            <summary>
            A dictionary of name to ViewComponent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.Initialize">
            <summary>
            Invoked by the framework in order to initialize the state
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.Create(System.String)">
            <summary>
            Creates an instance of the requested <see cref="T:Castle.MonoRail.Framework.ViewComponent"/>
            </summary>
            <param name="name">The view component's name</param>
            <returns>The view component instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.Release(Castle.MonoRail.Framework.ViewComponent)">
            <summary>
            Releases a ViewComponent instance
            </summary>
            <remarks>
            Not currently used
            </remarks>
            <param name="instance"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.AddBuiltInComponents">
            <summary>
            Registers viewcomponents provided by default.
            <seealso cref="T:Castle.MonoRail.Framework.ViewComponents.CaptureFor"/>
            <seealso cref="T:Castle.MonoRail.Framework.ViewComponents.SecurityComponent"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.RegisterComponent(System.String,System.Type)">
            <summary>
            Registers a view component type.
            </summary>
            <param name="name">The view components's name</param>
            <param name="type">The view component's which must extend <see cref="T:Castle.MonoRail.Framework.ViewComponent"/></param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.ViewEngine">
            <summary>
            Implementors should return a reference to 
            the current view engine.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultCacheProvider">
            <summary>
            Simple implementation of <see cref="T:Castle.MonoRail.Framework.ICacheProvider"/>
            that relies on ASP.Net Cache
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ICacheProvider">
            <summary>
            Depicts the contract for cache provider. Was
            created to be used with providers like memcached.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultCacheProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultCacheProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider">
            <summary>
            Constructs and caches all collected information
            about a <see cref="T:Castle.MonoRail.Framework.Controller"/> and its actions.
            <seealso cref="T:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IControllerDescriptorProvider">
            <summary>
            Defines the contract for implementations that should
            collect from one or more sources the meta information that
            dictates the <see cref="T:Castle.MonoRail.Framework.Controller"/> behavior and the actions it exposes.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.locker">
            <summary>
            Used to lock the cache
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.BuildDescriptor(Castle.MonoRail.Framework.Controller)">
            <summary>
            Constructs and populates a <see cref="T:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor"/>.
            </summary>
            <remarks>
            This implementation is also responsible for caching 
            constructed meta descriptors.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.BuildDescriptor(System.Type)">
            <summary>
            Constructs and populates a <see cref="T:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor"/>.
            </summary>
            <remarks>
            This implementation is also responsible for caching 
            constructed meta descriptors.
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.FilterDescriptorComparer">
            <summary>
            This <see cref="T:System.Collections.IComparer"/> implementation
            is used to sort the filters based on their Execution Order.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultControllerFactory">
            <summary>
            Standard implementation of <see cref="T:Castle.MonoRail.Framework.IControllerFactory"/>.
            It inspects assemblies looking for concrete classes
            that extend <see cref="T:Castle.MonoRail.Framework.Controller"/>.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerFactory.Initialize">
            <summary>
            Invoked by the framework in order to initialize the state
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerFactory.Inspect(System.String)">
            <summary>
            Loads the assembly and inspect its public types.
            </summary>
            <param name="assemblyFileName"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerFactory.Inspect(System.Reflection.Assembly)">
            <summary>
            Inspect the assembly's public types.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultControllerTree">
            <summary>
            Default implementation of <see cref="T:Castle.MonoRail.Framework.IControllerTree"/>.
            Represents an binary tree of registered controllers.
            <para>
            It is used by the controller factory to resolve a controller instance
            based on the specified area (which is optional) and controller name
            </para>
            <seealso cref="T:Castle.MonoRail.Framework.IControllerTree"/>
            <seealso cref="T:Castle.MonoRail.Framework.Services.AbstractControllerFactory"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IControllerTree">
            <summary>
            Represents an binary tree of registered controllers.
            <para>
            It is used by the controller factory to resolve a controller instance
            based on the specified area (which is optional) and controller name
            </para>
            <seealso cref="T:Castle.MonoRail.Framework.Services.AbstractControllerFactory"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerTree.AddController(System.String,System.String,System.Object)">
            <summary>
            Register a controller on the tree. If the specified
            area name matches the current node, the controller is
            register on the node itself, otherwise on the right or 
            on the left node.
            </summary>
            <remarks>
            Note that the controller is an <c>object</c>. That allows
            different implementation of a controller factory to register
            different representation of what a controller is (a name, a descriptor etc)
            </remarks>
            <param name="areaName">The area name, or <c>String.Empty</c></param>
            <param name="controllerName">The controller name</param>
            <param name="controller">The controller representation</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerTree.GetController(System.String,System.String)">
            <summary>
            Returns a controller previously registered. 
            </summary>
            <param name="areaName">The area name, or <c>String.Empty</c></param>
            <param name="controllerName">The controller name</param>
            <returns>The controller representation or null</returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerTree.area">
            <summary>
            The area the controller belongs to. 
            The default area is <c>String.Empty</c>
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerTree.controllers">
            <summary>
            A dictionary of controllers that belongs to this node (area)
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerTree.left">
            <summary>
            The controllers node on the left
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerTree.right">
            <summary>
            The controllers node on the right
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerTree.#ctor">
            <summary>
            Constructs a <c>ControllerTree</c> with an empty area
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerTree.#ctor(System.String)">
            <summary>
            Constructs a <c>ControllerTree</c> specifying an area
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerTree.AddController(System.String,System.String,System.Object)">
            <summary>
            Register a controller on the tree. If the specified
            area name matches the current node, the controller is
            register on the node itself, otherwise on the right or 
            on the left node.
            </summary>
            <remarks>
            Note that the controller is an <c>object</c>. That allows
            different implementation of a controller factory to register
            different representation of what a controller is (a name, a descriptor etc)
            </remarks>
            <param name="areaName">The area name, or <c>String.Empty</c></param>
            <param name="controllerName">The controller name</param>
            <param name="controller">The controller representation</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerTree.GetController(System.String,System.String)">
            <summary>
            Returns a controller previously registered. 
            </summary>
            <param name="areaName">The area name, or <c>String.Empty</c></param>
            <param name="controllerName">The controller name</param>
            <returns>The controller representation or null</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultFilterFactory">
            <summary>
            Standard implementation of <see cref="T:Castle.MonoRail.Framework.IFilterFactory"/>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IFilterFactory">
            <summary>
            Depicts the contract used by the engine
            to obtain implementations of <see cref="T:Castle.MonoRail.Framework.IFilter"/>.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultFilterFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultFilterFactory.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultFilterFactory.Create(System.Type)">
            <summary>
            Creates a filter instance
            </summary>
            <param name="filterType">The filter's type</param>
            <returns>The filter instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultFilterFactory.Release(Castle.MonoRail.Framework.IFilter)">
            <summary>
            Releases a filter instance
            </summary>
            <param name="filter">The filter instance</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultResourceFactory">
            <summary>
            Standard implementation of <see cref="T:Castle.MonoRail.Framework.IResourceFactory"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IResourceFactory">
            <summary>
            Depicts the contract used by the engine
            to obtain implementations of <see cref="T:Castle.MonoRail.Framework.IResource"/>.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultResourceFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultResourceFactory.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultResourceFactory.Create(Castle.MonoRail.Framework.Internal.ResourceDescriptor,System.Reflection.Assembly)">
            <summary>
            Creates an implementation of <see cref="T:Castle.MonoRail.Framework.IResource"/>
            based on the descriptor.
            <seealso cref="T:System.Resources.ResourceManager"/>
            <seealso cref="T:Castle.MonoRail.Framework.Internal.ResourceFacade"/>
            </summary>
            <param name="descriptor"></param>
            <param name="appAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultResourceFactory.Release(Castle.MonoRail.Framework.IResource)">
            <summary>
            Releases a resource
            </summary>
            <param name="resource"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory">
            <summary>
            Default implementation of <see cref="T:Castle.MonoRail.Framework.IViewComponentFactory"/>
            <para>
            This implementation looks for concrete types that extend 
            <see cref="T:Castle.MonoRail.Framework.ViewComponent"/> in an assembly
            </para>
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.viewEngine">
            <summary>
            View engine instance used to initialize the <see cref="T:Castle.MonoRail.Framework.ViewComponent"/>
            instance upon creation
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.#ctor">
            <summary>
            Constructs a <c>DefaultViewComponentFactory</c>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.Initialize">
            <summary>
            Invoked by the framework in order to initialize the state
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.Inspect(System.String)">
            <summary>
            Loads the assembly and inspect its public types.
            </summary>
            <param name="assemblyFileName"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.Inspect(System.Reflection.Assembly)">
            <summary>
            Inspect the assembly's public types.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.EmailTemplateService">
            <summary>
            Default implementation of <see cref="T:Castle.MonoRail.Framework.IEmailTemplateService"/>
            </summary>
            <remarks>
            Will work only during a MonoRail process as it needs a <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/>
            and a <see cref="T:Castle.MonoRail.Framework.Controller"/> instance to execute.
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.IEmailTemplateService">
            <summary>
            Represents the disacoupled service to use 
            MonoRail's view engine to process email templates.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IEmailTemplateService.RenderMailMessage(System.String,System.Collections.IDictionary)">
            <summary>
            Creates an instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/>
            using the specified template for the body
            </summary>
            <param name="templateName">
            Name of the template to load. 
            Will look in <c>Views/mail</c> for that template file.
            </param>
            <param name="parameters">
            Dictionary with parameters 
            that you can use on the email template
            </param>
            <returns>An instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IEmailTemplateService.RenderMailMessage(System.String,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            Creates an instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/>
            using the specified template for the body
            </summary>
            <param name="templateName">
            Name of the template to load. 
            Will look in <c>Views/mail</c> for that template file.
            </param>
            <param name="context"></param>
            <param name="controller"></param>
            <returns>An instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.EmailTemplateService.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.EmailTemplateService.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.EmailTemplateService.RenderMailMessage(System.String,System.Collections.IDictionary)">
            <summary>
            Creates an instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/>
            using the specified template for the body
            </summary>
            <param name="templateName">
            Name of the template to load. 
            Will look in <c>Views/mail</c> for that template file.
            </param>
            <param name="parameters">
            Dictionary with parameters 
            that you can use on the email template
            </param>
            <returns>An instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.EmailTemplateService.RenderMailMessage(System.String,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            Creates an instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/>
            using the specified template for the body
            </summary>
            <param name="templateName">
            Name of the template to load. 
            Will look in Views/mail for that template file.
            </param>
            <param name="context"></param>
            <param name="controller"></param>
            <returns>An instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.MonoRailSmtpSender">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.WeakReferenceCacheProvider">
            <summary>
            Simple implementation that relies on weak 
            references in a dictionary
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.WeakReferenceCacheProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.WeakReferenceCacheProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponents.CaptureFor">
             <summary>
             Renders the inner content and stores it in the IViewEngineContext
             <code>
             #blockcomponent(CaptureFor with "id=someId" ["append=before"])
            		content to be captured
             #end
            
             ${someId}
             </code>
             id - the key to be used to retrieve the captured contents
             append - when present will append component content into the current
            			 content, if append = "before" will append before the current content
             </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponent">
            <summary>
            Base class for UI Components
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ViewComponent.context">
            <summary>
            Holds the component context
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ViewComponent.railsContext">
            <summary>
            Holds the <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/> associated
            to the request lifetime.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.Init(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.IViewComponentContext)">
            <summary>
            Invoked by the framework.
            </summary>
            <param name="railsContext"></param>
            <param name="context"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.Initialize">
            <summary>
            Called by the framework once the component instance
            is initialized
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.Render">
            <summary>
            Called by the framework so the component can 
            render its content
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.RenderView(System.String)">
            <summary>
            Specifies the view to be processed after the component has finished its processing. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.RenderView(System.String,System.String)">
            <summary>
            Specifies the view to be processed after the component has finished its processing. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.RenderSharedView(System.String)">
            <summary>
            Specifies the shared view to be processed after the component has finished its
            processing. (A partial view shared 
            by others views and usually in the root folder
            of the view directory).
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.CancelView">
            <summary>
            Cancels the view processing.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.Context">
            <summary>
            Gets the Component Context
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.RailsContext">
            <summary>
            Gets the <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/>
            associated with the current request
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.ComponentParams">
            <summary>
            Gets the component parameters
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.Session">
            <summary>
            Gets the Session dictionary.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.Flash">
            <summary>
            Gets a dictionary of volative items.
            Ideal for showing success and failures messages.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.HttpContext">
            <summary>
            Gets the web context of ASP.NET API.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.Request">
            <summary>
            Gets the request object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.Response">
            <summary>
            Gets the response object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.PropertyBag">
            <summary>
            Provides a way to make data available
            to the view that the component uses
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.Params">
            <summary>
            Shortcut to Request.Params
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.CaptureFor.Render">
            <summary>
            Render component's content and stores it in the view engine ContextVars
            so it can be reference and included in other places
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponents.ChildContentComponent">
            <summary>
            Renders the contents of the block component into the $childContent context
            variable, and then renders the components view file.
            </summary>
            <example>
            Controller view:
            <code>
            #blockcomponent(ChildContentComponent)
            	This will be rendered inside a div tag.
            #end
            </code>
            
            ViewComponent view:
            <code>
            &lt;div&gt;$componentChildContent&lt;/&gt;
            </code>
            </example>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponents.SecurityComponent">
            <summary>
            Only renders the body if the current user has the specified role
            <code>
            #blockcomponent(SecurityComponent with "role=IsAdmin")
            	Content only available to admin
            #end
            </code>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.ActionTo">
            <summary>
            Redirects the post for an especified Action, Controller and Area.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ActionTo.FormID">
            <summary>
            The Form that will be redirected.
            </summary>
            <value>A string represeting the FormID.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.Contents">
            <summary>
            Control used on master pages to represent 
            the position where the child page contents 
            should be written.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper">
            <summary>
            Control used to invoke method os a specified Helper.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper.Name">
            <summary>
            The Helper's Name.
            </summary>
            <value>A <see cref="T:System.String"/> representing the Helper's Name.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper.Method">
            <summary>
            The name of the method which will be invoked.
            </summary>
            <value>A <see cref="T:System.String"/> rerprsenting the method's name</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper.Args">
            <summary>
            An <see cref="T:System.Array"/> of objects which are the method arguments.
            </summary>
            <value>An object[] representing the arguments.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper.Arg">
            <summary>
            An <see cref="T:System.Object"/> which is the method argument.
            </summary>
            <value>An <see cref="T:System.Object"/> representing the argument.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.MasterPageBase">
            <summary>
            Summary description for MasterPageBase.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine">
            <summary>
            Default implementation of a <see cref="T:Castle.MonoRail.Framework.IViewEngine"/>.
            Uses ASP.Net WebForms as views.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewEngineBase">
            <summary>
            Abstract base class for View Engines.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IViewEngine">
            <summary>
            Depicts the contract used by the engine
            to process views, in an independent manner.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngine.HasTemplate(System.String)">
            <summary>
            Evaluates whether the specified template exists.
            </summary>
            <returns><c>true</c> if it exists</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngine.Process(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the view - using the templateName 
            to obtain the correct template,
            and using the context to output the result.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngine.Process(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
             Processes the view - using the templateName 
             to obtain the correct template
             and writes the results to the System.TextWriter. 
             No layout is applied!
             </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngine.ProcessContents(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Wraps the specified content in the layout using 
            the context to output the result.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.HasTemplate(System.String)">
            <summary>
            Evaluates whether the specified template exists.
            </summary>
            <returns><c>true</c> if it exists</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.Process(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the view - using the templateName 
            to obtain the correct template,
            and using the context to output the result.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.ProcessContents(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Wraps the specified content in the layout using the 
            context to output the result.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.Process(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
             Processes the view - using the templateName 
             to obtain the correct template
             and writes the results to the System.IO.TextWriter.
             </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.AdjustContentType(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Sets the HTTP Content-Type header appropriately.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewEngineBase.XhtmlRendering">
            <summary>
            Gets/sets whether rendering should aim to be XHTML compliant, obtained from the configuration.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.Process(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Obtains the aspx Page from the view name dispatch
            its execution using the standard ASP.Net API.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IMonoRailHttpHandlerProvider">
            <summary>
            Depicts the contract the engine has 
            to perform the creation and disposal of
            <see cref="T:System.Web.IHttpHandler"/> instances.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IMonoRailHttpHandlerProvider.ObtainMonoRailHttpHandler(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should perform their logic to 
            return a instance of <see cref="T:System.Web.IHttpHandler"/>.
            If the <see cref="T:System.Web.IHttpHandler"/> can not be created,
            it should return <c>null</c>.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IMonoRailHttpHandlerProvider.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Implementors should perform their logic 
            to release the <see cref="T:System.Web.IHttpHandler"/> instance
            and its resources.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.EmbeddedResourceViewSource">
            <summary>
            
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IViewSourceLoader">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewSourceLoader.HasTemplate(System.String)">
            <summary>
            Evaluates whether the specified template exists.
            </summary>
            <returns><c>true</c> if it exists</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewSourceLoader.GetViewSource(System.String)">
            <summary>
            
            </summary>
            <param name="templateName"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewSourceLoader.ListViews(System.String)">
            <summary>
            
            </summary>
            <param name="dirName"></param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewSourceLoader.ViewRootDir">
            <summary>
            Gets/sets the root directory of views, obtained from the configuration.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewSourceLoader.EnableCache">
            <summary>
            
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewSourceLoader.AdditionalSources">
            <summary>
            
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.IViewSourceLoader.ViewChanged">
            <summary>
            Raised when the view is changed.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.HasTemplate(System.String)">
            <summary>
            Evaluates whether the specified template exists.
            </summary>
            <returns><c>true</c> if it exists</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.ListViews(System.String)">
            <summary>
            
            </summary>
            <param name="dirName"></param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.ViewRootDir">
            <summary>
            Gets/sets the root directory of views, 
            obtained from the configuration.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.EnableCache">
            <summary>
            
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.ViewChanged">
            <summary>
            Raised when the view is changed.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.FileViewSource">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Constants.ControllerContextKey">
            <summary>
            TODO: Document why this is necessary
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Constants.OriginalViewKey">
            <summary>
            TODO: Document why this is necessary
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ControllerException">
            <summary>
            Represents and Exception during the controller processing.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ControllerNotFoundException">
            <summary>
            Thrown when a controller is not found.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.DelegateDynamicAction">
            <summary>
            Represents a dynamic action that forwards the
            call to an <see cref="T:Castle.MonoRail.Framework.ActionDelegate"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IDynamicAction">
            <summary>
            An action that is not a method
            on the controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IDynamicAction.Execute(Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should perform the action 
            upon this invocation
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.EngineContextModule">
            <summary>
            Provides the services used and shared by the framework. Also 
            is in charge of creating an implementation of <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/>
            upon the start of a new request.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.EngineContextModule.Init(System.Web.HttpApplication)">
            <summary>
            Configures the framework, starts the services
            and application hooks.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.EngineContextModule.SubscribeToApplicationHooks(System.Web.HttpApplication)">
            <summary>
            Registers to <c>HttpApplication</c> events
            </summary>
            <param name="context">The application instance</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Sweep">
            <summary>
            Remove any element thats not marked to be kept.
            This method is automatically called by the framework after the controller is processed.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Keep">
            <summary>
            Keeps the entire flash contents available for the next action
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Keep(System.Object)">
            <summary>
            Keeps the Flash['key'] contents available for the next action
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Discard">
            <summary>
            Marks the entire flash to be discarded by the end of the current action
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Discard(System.Object)">
            <summary>
            Marks Flash[key] to be discarded by the end of the current action
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Now(System.Object,System.Object)">
            <summary>
            Sets a flash that will not be available to the next action, only to the current.
            <code>
                Flash.Now( key, "Hello current action" )
            </code>
            <para>
            This method enables you to use the flash as a central messaging system in your app.
            When you need to pass an object to the next action, you use the standard flash assign (<c>[]=</c>).
            When you need to pass an object to the current action, you use <c>Now</c>, and your object will
            vanish when the current action is done.
            </para>
            <para>
            Entries set via <c>Now</c> are accessed the same way as standard entries: <c>Flash['my-key']</c>.
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.InternalAdd(System.Object,System.Object)">
            <summary>
            Making sure we keep any item added 
            to the flash directly for at least one more action.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IDynamicActionProvider">
            <summary>
            Defines that the implementor wants to add
            dynamic actions to controllers.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IDynamicActionProvider.IncludeActions(Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should register their dynamics 
            actions into the controller
            </summary>
            <param name="controller">The target controller</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.ExecuteEnum">
            <summary>
            Enum (flag) to indicate when the filter should 
            or is invoked.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.Before">
            <summary>
            The filter is invoked before the action.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.After">
            <summary>
            The filter is invoked after the action.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.Around">
            <summary>
            The filter is invoked before and after the action.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.BeforeAction">
            <summary>
            The filter is invoked before the action.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.AfterAction">
            <summary>
            The filter is invoked after the action.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.AfterRendering">
            <summary>
            The filter is invoked after the rendering.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.Always">
            <summary>
            The filter is invoked around all steps.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IScaffoldingSupport">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IScaffoldingSupport.Process(Castle.MonoRail.Framework.Controller)">
            <summary>
            Pendent
            </summary>
            <param name="controller"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.MonoRailHttpHandler">
            <summary>
            Implements <see cref="T:System.Web.IHttpHandler"/> to dispatch the web
            requests. 
            <seealso cref="T:Castle.MonoRail.Framework.MonoRailHttpHandlerFactory"/>
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.MonoRailHttpHandler.logger">
            <summary>Logger instance that won't be null, even when logging is disabled</summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandler.#ctor(Castle.Core.Logging.ILogger)">
            <summary>
            Constructs a <c>MonoRailHttpHandler</c>
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Pendent
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandler.Process(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Performs the base work of MonoRail. Extracts 
            the information from the URL, obtain the controller 
            that matches this information and dispatch the execution 
            to it.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandler.ExtractUrlInfo(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Can be overriden so new semantics can be supported.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.MonoRailHttpHandler.IsReusable">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.MonoRailHttpHandlerFactory">
            <summary>
            Coordinates the creation of new <see cref="T:Castle.MonoRail.Framework.MonoRailHttpHandler"/> 
            and uses the configuration to obtain the correct factories 
            instances.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandlerFactory.CreateLogger(System.String,System.IServiceProvider)">
            <summary>
            This might be subject to race conditions, but
            I'd rather take the risk - which in the end
            means just replacing the instance - than
            creating locks that will affect every single request
            </summary>
            <param name="name"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.MonoRailServiceContainer">
            <summary>
            
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.MonoRailServiceContainer.extensionManager">
            <summary>The only one Extension Manager</summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.MonoRailServiceContainer.extensions">
            <summary>Prevents GC from collecting the extensions</summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.InitExtensions(Castle.MonoRail.Framework.Configuration.MonoRailConfiguration)">
            <summary>
            Reads the configuration and initializes
            registered extensions.
            </summary>
            <param name="config">The configuration object</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.InitServices(Castle.MonoRail.Framework.Configuration.MonoRailConfiguration)">
            <summary>
            Coordinates the instantiation, registering and initialization (lifecycle-wise)
            of the services used by MonoRail.
            </summary>
            <param name="config">The configuration object</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.LifecycleInitialize(System.Collections.IList)">
            <summary>
            Checks for services that implements <see cref="T:Castle.Core.IInitializable"/>
            or <see cref="T:System.ComponentModel.ISupportInitialize"/> and initialize them through the interface
            </summary>
            <param name="services">List of MonoRail's services</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.LifecycleService(System.Collections.IList)">
            <summary>
            Checks for services that implements <see cref="T:Castle.Core.IServiceEnabledComponent"/>
            and invoke <see cref="M:Castle.Core.IServiceEnabledComponent.Service(System.IServiceProvider)"/> on them
            </summary>
            <param name="services">List of MonoRail's services</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.InstantiateAndRegisterServices(Castle.MonoRail.Framework.Configuration.ServiceEntryCollection)">
            <summary>
            Instantiates and registers the services used by MonoRail.
            </summary>
            <param name="services">The service's registry</param>
            <returns>List of service's instances</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.InitConfiguration">
            <summary>
            Registers the default implementation of services, if 
            they are not registered
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.RegisterMissingServices(Castle.MonoRail.Framework.Configuration.MonoRailConfiguration)">
            <summary>
            Checks whether non-optional services were supplied 
            through the configuration, and if not, register the 
            default implementation.
            </summary>
            <param name="config">The configuration object</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.ProcessEngine">
            <summary>
            Core engine. Performs the base work or the
            framework, processing the URL and dispatching 
            the execution to the controller.
            </summary>
            <remarks>
            This is were all fun begins.
            </remarks>
        </member>
        <member name="P:Castle.MonoRail.Framework.ProcessEngine.CurrentContext">
            <summary>
            Returns the MonoRail context assosciated with the current
            request if one is available, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.RoutingModule">
            <summary>
            Provides routing services in response to rules defined in 
            <see cref="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.RoutingRules"/>.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.RoutingModule.OriginalPath">
            <summary>
            Returns the original path 
            (before rewriting occured), or <c>null</c> 
            if rewriting didn't occur on this request.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.SmartDispatcherController">
            <summary>
            Specialization of <see cref="T:Castle.MonoRail.Framework.Controller"/> that tries
            to match the request params to method arguments.
            </summary>
            <remarks>
            You don't even need to always use databinding within
            arguments. <see cref="M:Castle.MonoRail.Framework.SmartDispatcherController.BindObject(System.Type,System.String)"/> 
            and <see cref="M:Castle.MonoRail.Framework.SmartDispatcherController.BindObjectInstance(System.Object,System.String)"/>
            provides the same functionality to be used in place.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.CalculatePoints(System.Reflection.MethodInfo,System.Collections.Specialized.NameValueCollection,System.Object[])">
            <summary>
            Uses a simplest algorithm to compute points for a method 
            based on parameters available, which in turn reflects
            the best method is the one which the parameters will be 
            able to satistfy more arguments
            </summary>
            <param name="candidate">The method candidate</param>
            <param name="actionArgs">Extra parameters</param>
            <param name="webParams"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.BuildMethodArguments(System.Reflection.ParameterInfo[],Castle.MonoRail.Framework.IRequest,System.Object[])">
            <summary>
            Returns an array that hopefully fills the arguments of the selected action.
            </summary>
            <remarks>
            Each parameter is inspected and we try to obtain an implementation of
            <see cref="T:Castle.MonoRail.Framework.IParameterBinder"/> from the attributes the parameter have (if any).
            If an implementation is found, it's used to fill the value for that parameter.
            Otherwise we use simple conversion to obtain the value.
            </remarks>
            <param name="parameters">Parameters to obtain the values to</param>
            <param name="request">The current request, which is the source to obtain the data</param>
            <param name="actionArgs">Extra arguments to pass to the action.</param>
            <returns>An array with the arguments values</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.ObtainParamsNode(Castle.MonoRail.Framework.ParamStore)">
            <summary>
            This method is for internal use only
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.SmartDispatcherController.ParamsNode">
            <summary>
            Lazy initialized property with a hierarchical 
            representation of the flat data on <see cref="P:Castle.MonoRail.Framework.Controller.Params"/>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.SmartDispatcherController.FormNode">
            <summary>
            Lazy initialized property with a hierarchical 
            representation of the flat data on <see cref="P:Castle.MonoRail.Framework.IRequest.Form"/>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.SmartDispatcherController.QueryStringNode">
            <summary>
            Lazy initialized property with a hierarchical 
            representation of the flat data on <see cref="P:Castle.MonoRail.Framework.IRequest.QueryString"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.WizardActionProvider">
            <summary>
            Provide easy to use Wizard-like support.
            </summary>
            <remarks>
            We use the DynamicAction infrastructure to provide 
            wizard support. By doing we dont force 
            the programmer to inherit from a specific Controller 
            which can be quite undesirable in common business projects
            situations. 
            <para>
            Nevertheless we do require that the programmer 
            implements <see cref="T:Castle.MonoRail.Framework.IWizardController"/> on the wizard controller.
            </para>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardActionProvider.IncludeActions(Castle.MonoRail.Framework.Controller)">
            <summary>
            
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardActionProvider.Execute(Castle.MonoRail.Framework.Controller)">
            <summary>
            Invoked as "start" action
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardActionProvider.OnStepActionRequested(Castle.MonoRail.Framework.Controller)">
            <summary>
            Invoked when a step is accessed on the url, 
            i.e. http://host/mywizard/firststep.rails and 
            when an inner action is invoked like http://host/mywizard/firststep-save.rails
            </summary>
            <param name="controller"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.WizardStepPage">
            <summary>
            Represents a wizard step. 
            </summary>
            <remarks>
            Implementors can optionally override <see cref="P:Castle.MonoRail.Framework.WizardStepPage.ActionName"/>
            to customize the accessible action name and 
            <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RenderWizardView"/> in order to define which view 
            should be used (defaults to the step name)
            <para>
            Please note that an step might have actions as well, but it follows a different 
            convention to be accessed. You must use the wizard controller name, slash, the
            step name, hifen, the action name. For example <c>/MyWizard/AddressInformation-GetCountries.rails</c>
            Which would access the following action
            </para>
            <code>
            public class AddressInformation : WizardStepPage
            {
            	public void GetCountries()
            	{
            	  ...
            	}
            }
            </code>
            <para>Note that the RedirectToAction will always send to an internal action, so you should
            omit the controller name for that.</para>
            <para>
            You can use a family of redirect methods to go back and forward on the wizard's 
            steps.
            </para>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.Initialize(Castle.MonoRail.Framework.Controller)">
            <summary>
            Invoked by <see cref="T:Castle.MonoRail.Framework.WizardActionProvider"/>. 
            </summary>
            <remarks>
            This can be overriden but it's important to invoke the base 
            implementation.
            </remarks>
            <param name="wizardController"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.Reset">
            <summary>
            Invoked when the wizard is being access from the start 
            action. Implementors should perform session clean up (if 
            they actually use the session) to avoid stale data on forms.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RenderWizardView">
            <summary>
            Used to decide on which view to render.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.IsPreConditionSatisfied(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Allow the step to assert some condition 
            before being accessed. Returning <c>false</c>
            prevents the step from being processed but 
            before doing that you must send a redirect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.DoNavigate">
            <summary>
            Navigates within the wizard steps using optionally a form parameter 
            to dictate to where it should go.
            </summary>
            <remarks>
            By default this will invoke <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToNextStep(System.Collections.IDictionary)"/>
            however you can send a field form <c>navigate.to</c> to customize this.
            The possible values for <c>navigate.to</c> are:
            <list type="bullet">
            <item><term>previous</term>
            <description>Invokes <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToPreviousStep"/></description></item>
            <item><term>first</term>
            <description>Invokes <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToFirstStep"/></description></item>
            <item><term>step name</term>
            <description>A custom step name to navigate</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.DoNavigate(System.String[])">
            <summary>
            Navigates within the wizard steps using optionally a form parameter 
            to dictate to where it should go.
            </summary>
            <remarks>
            By default this will invoke <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToNextStep(System.Collections.IDictionary)"/>
            however you can send a field form <c>navigate.to</c> to customize this.
            The possible values for <c>navigate.to</c> are:
            <list type="bullet">
            <item><term>previous</term>
            <description>Invokes <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToPreviousStep"/></description></item>
            <item><term>first</term>
            <description>Invokes <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToFirstStep"/></description></item>
            <item><term>step name</term>
            <description>A custom step name to navigate</description></item>
            </list>
            </remarks>
            <param name="queryStringParameters">Query string parameters to be on the URL</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.DoNavigate(System.Collections.IDictionary)">
            <summary>
            Navigates within the wizard steps using optionally a form parameter 
            to dictate to where it should go.
            </summary>
            <remarks>
            By default this will invoke <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToNextStep(System.Collections.IDictionary)"/>
            however you can send a field form <c>navigate.to</c> to customize this.
            The possible values for <c>navigate.to</c> are:
            <list type="bullet">
            <item><term>previous</term>
            <description>Invokes <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToPreviousStep"/></description></item>
            <item><term>first</term>
            <description>Invokes <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToFirstStep"/></description></item>
            <item><term>step name</term>
            <description>A custom step name to navigate</description></item>
            </list>
            </remarks>
            <param name="queryStringParameters">Query string parameters to be on the URL</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToNextStep">
            <summary>
            Sends a redirect to the next wizard step (if it exists)
            </summary>
            <exception cref="T:Castle.MonoRail.Framework.RailsException">if no further step exists</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToNextStep(System.String[])">
            <summary>
            Sends a redirect to the next wizard step (if it exists)
            </summary>
            <exception cref="T:Castle.MonoRail.Framework.RailsException">if no further step exists</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToNextStep(System.Collections.IDictionary)">
            <summary>
            Sends a redirect to the next wizard step (if it exists)
            </summary>
            <exception cref="T:Castle.MonoRail.Framework.RailsException">if no further step exists</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToPreviousStep">
            <summary>
            Sends a redirect to the previous wizard step
            </summary>
            <exception cref="T:Castle.MonoRail.Framework.RailsException">
            if no previous step exists (ie. already in the first one)</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToPreviousStep(System.String[])">
            <summary>
            Sends a redirect to the previous wizard step
            </summary>
            <exception cref="T:Castle.MonoRail.Framework.RailsException">
            if no previous step exists (ie. already in the first one)</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToPreviousStep(System.Collections.IDictionary)">
            <summary>
            Sends a redirect to the previous wizard step
            </summary>
            <exception cref="T:Castle.MonoRail.Framework.RailsException">
            if no previous step exists (ie. already in the first one)</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToFirstStep">
            <summary>
            Sends a redirect to the first wizard step
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToFirstStep(System.String[])">
            <summary>
            Sends a redirect to the first wizard step
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToFirstStep(System.Collections.IDictionary)">
            <summary>
            Sends a redirect to the first wizard step
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToStep(System.String)">
            <summary>
            Sends a redirect to a custom step (that must exists)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToStep(System.String,System.String[])">
            <summary>
            Sends a redirect to a custom step (that must exists)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToStep(System.String,System.Collections.IDictionary)">
            <summary>
            Sends a redirect to a custom step (that must exists)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.TransformActionName(System.String)">
            <summary>
            For a wizard step, an internal action will always be named
            with the controller name as a prefix , plus an hifen and finally
            the action name. This implementation does exactly that.
            </summary>
            <param name="action">Raw action name</param>
            <returns>Properly formatted action name</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.WizardStepPage.ActionName">
            <summary>
            Returns the action name that will be used 
            to represent this step.
            </summary>
        </member>
    </members>
</doc>
