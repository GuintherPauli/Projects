<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.MonoRail.Framework.Views.StringTemplate</name>
    </assembly>
    <members>
        <member name="T:Castle.MonoRail.Framework.Views.StringTemplateView.Configuration.STViewEngineSectionHandler">
             <summary>
             Parses the Xml element that represents the STViewEngine 
             configuration information in the configuration file
             associated with the AppDomain (usually web.config).
             </summary>
             <remarks>
             <para>
             The STViewEngine integration can be customised by specifying options 
             in a custom section named 'STViewEngine' in the web.config file. 
             The following sample declaration shows what can be customized:
            
             <code escaped="true">
            		<STViewEngine 
            			template-writer="Antlr.StringTemplate.AutoIndentWriter, StringTemplate" 
            			template-lexer="Antlr.StringTemplate.Language.DefaultTemplateLexer, StringTemplate">
            			
            			<attribute-renderers>
            				<attribute-renderer area="articles" renderer-type="Kunle.MyStringRenderer, Kunle.STRenderer" target-type="System.String" />
            				<attribute-renderer renderer-type="Kunle.MyDateRenderer, Kunle.STRenderer" target-type="System.DateTime" />
            			</attribute-renderers>
            			
            		</STViewEngine>
             </code>
             </para>
             </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.StringTemplateView.BasicStringTemplateGroup">
            <summary>
            A StringTemplateGroup that does not cache templates return by
            super groups.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.StringTemplateView.BasicStringTemplateGroup.#ctor(System.String,Antlr.StringTemplate.StringTemplateLoader,System.Type)">
            <summary>
            Create a group manager for templates loaded via a specified
            <see cref="T:Antlr.StringTemplate.StringTemplateLoader"/>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.StringTemplateView.StringTemplateViewEngine">
            <summary>
            A MonoRail IViewEngine implementation that uses the StringTemplate 
            library as a view template engine.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Views.StringTemplateView.StringTemplateViewEngine.area2templateManager">
            <summary>Maps controllers to [cached] ST groups for locating views templates</summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.StringTemplateView.StringTemplateViewEngine.#ctor">
            <summary>
            Creates a new <see cref="T:Castle.MonoRail.Framework.Views.StringTemplateView.StringTemplateViewEngine"/> instance.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.StringTemplateView.StringTemplateViewEngine.GetViewTemplate(Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Retrieves the ST template for specified controller and template name.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.StringTemplateView.StringTemplateViewEngine.GetLayoutTemplate(Castle.MonoRail.Framework.Controller)">
            <summary>
            Retrieves the ST layout template for the specified controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.StringTemplateView.ViewComponentStringTemplate.dup(Antlr.StringTemplate.StringTemplate,Antlr.StringTemplate.StringTemplate)">
            <summary>
            Make the 'to' template look exactly like the 'from' template
            except for the attributes.
            </summary>
        </member>
    </members>
</doc>
